<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NULL&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.iplua.com/"/>
  <updated>2019-05-25T05:03:39.000Z</updated>
  <id>https://blog.iplua.com/</id>
  
  <author>
    <name>序曲</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Thor过滤器：追书神器fix</title>
    <link href="https://blog.iplua.com/thor2/"/>
    <id>https://blog.iplua.com/thor2/</id>
    <published>2019-05-18T09:01:00.000Z</published>
    <updated>2019-05-25T05:03:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章末尾有录屏</p></blockquote><p>得益于Thor的强大功能，给追书神器添加换源功能，早在一个月前就实现了。从最开始完全搞不懂Thor的用法到现在能完整的写一个过滤器出来还是有很大进步的，刚开始我觉得写一个过滤器需要许多专业知识…然后就退缩了，很长时间没有去理会这个。后来去学Python爬虫的时候发现需要抓包，所以又拿出了这个工具，手机用Thor，电脑用Fiddler，成功的写了几个还算有用的爬虫。</p><p>其实吧，使用Thor并不是很难，有耐心就够了，半天就可以熟练使用，但是真要弄出一个过滤器需要分析大量的请求信息，耐心才是最重要的。但是我有点困惑，这玩意！！花了我好多时间，到底有个什么用，哭了…</p><p>之前抓过追书神器的很多包了，现在一些常见的接口还是知道，当然，网上有人整理了追书神器的接口啦：<a href="https://github.com/xiadd/zhuishushenqi" target="_blank" rel="noopener">Gayhub</a>。不过这些接口没啥用….又不是写爬虫，要这个干嘛！！！</p><a id="more"></a><h3 id="首先创建一个过滤器"><a href="#首先创建一个过滤器" class="headerlink" title="首先创建一个过滤器"></a>首先创建一个过滤器</h3><p>没啥特殊的需要的话就用下面的配置就好了，在抓包的协议这块最常见的还是HTTP和HTTPS，而WS这种协议我只在哔哩哔哩的弹幕加载那里看到过（对于爬弹幕这件事没啥兴趣）。匹配<code>HTTP</code>的方法的话也是<code>GET / POST</code>比较常见，当然，抓追书神器的时候还见到了一个<code>OPTIONS</code>方法，下面再说这个方法干嘛用的。还有其他配置先默认设置，还需要修改也只有域名和关键字那一块，填好这一块可以排除许多无用数据包。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">过滤器名称：追书神器fix</span><br><span class="line">抓包的协议：HTTP / HTTPS</span><br><span class="line">匹配 HTTP 方法：GET / POST</span><br></pre></td></tr></table></figure><h3 id="断点的设置"><a href="#断点的设置" class="headerlink" title="断点的设置"></a>断点的设置</h3><p>在Thor里面有一个<code>挂载断点</code>的选项，如果一个过滤器没有断点就相当于没有灵魂（什么鬼…)，Thor的强大之处就在于挂载断点，只是抓包的话还有很多其他的软件不比它差。断点的字面意思就是在此处断开连接，比如我打算访问一个网站<code>www.google.com</code>，我就可以用断点设置一个TCP连接前的规则重定向到<code>www.baidu.com</code>，意思呢就是在满足一点条件的情况下可以暂时断开连接然后执行具体的操作，最后再发起请求。当然也可以拦截响应信息体，修改之后再给软件，用的最多的就是这个了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">断点名称：nullptr</span><br><span class="line">备注：空</span><br><span class="line">命中条件：空（不填的意思就是不需要满足任何条件断点都会被触发）</span><br><span class="line"></span><br><span class="line">1.TCP连接前</span><br><span class="line">2.请求头发送前</span><br><span class="line">3.请求信息体发送前</span><br><span class="line">4.响应头回传前</span><br><span class="line"></span><br><span class="line">//上面四个就算了，水平不到家，修改那些玩意有点奇怪...</span><br><span class="line">5.响应信息体回传前</span><br></pre></td></tr></table></figure><h3 id="实现具体的功能"><a href="#实现具体的功能" class="headerlink" title="实现具体的功能"></a>实现具体的功能</h3><p>其实吧，这个东西很简单，特别是追书神器，几乎没啥难度，只要抓包就能找到。书籍信息是存在他们服务器上面的，本地的软件只需要解析就行了，要解析的话就需要数据，而发起请求之后就有响应信息体，在回传的时候可以对其拦截并修改。对于换源功能，其实早期追书神器是都有换源的，后来越做越大，许多书籍不再提供盗版书源，而且加了很多广告…因此一般书能不能换源它应该是写的清清楚楚的，能换源我就开启换源接口，不能换源我就关闭，大概就是这样了。当然，一本书的信息里面是不可能说用中文写着“此书能换源”，可以参考下面一本书的具体信息:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"_id"</span>: <span class="string">"592fe687c60e3c4926b040ca"</span>,</span><br><span class="line"><span class="attr">"longIntro"</span>: <span class="string">"大千世界，无奇不有。我陈平安，唯有一剑，可搬山，倒海，降妖，镇魔，敕神，摘星，断江，摧城，开天！"</span>,</span><br><span class="line"><span class="attr">"title"</span>: <span class="string">"剑来"</span>,</span><br><span class="line"><span class="attr">"majorCate"</span>: <span class="string">"仙侠"</span>,</span><br><span class="line"><span class="attr">"minorCateV2"</span>: <span class="string">"古典仙侠"</span>,</span><br><span class="line"><span class="attr">"creater"</span>: <span class="string">"Meizu m1 metal"</span>,</span><br><span class="line"><span class="attr">"minorCate"</span>: <span class="string">"古典仙侠"</span>,</span><br><span class="line"><span class="attr">"author"</span>: <span class="string">"烽火戏诸侯"</span>,</span><br><span class="line"><span class="attr">"cover"</span>: <span class="string">"这里是书籍封面，太长，去掉...."</span>,</span><br><span class="line"><span class="attr">"majorCateV2"</span>: <span class="string">"仙侠"</span>,</span><br><span class="line"><span class="attr">"isMakeMoneyLimit"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"isFineBook"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"safelevel"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"allowFree"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"originalAuthor"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"anchors"</span>: [],</span><br><span class="line"><span class="attr">"authorDesc"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"rating"</span>: &#123;</span><br><span class="line"><span class="attr">"count"</span>: <span class="number">21686</span>,</span><br><span class="line"><span class="attr">"score"</span>: <span class="number">9.405</span>,</span><br><span class="line"><span class="attr">"isEffect"</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"hasCopyright"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"buytype"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"sizetype"</span>: <span class="number">-1</span>,</span><br><span class="line"><span class="attr">"superscript"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"currency"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"contentType"</span>: <span class="string">"txt"</span>,</span><br><span class="line"><span class="attr">"_le"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"allowMonthly"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"allowVoucher"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"allowBeanVoucher"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"hasCp"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"banned"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"postCount"</span>: <span class="number">53276</span>,</span><br><span class="line"><span class="attr">"latelyFollower"</span>: <span class="number">86486</span>,</span><br><span class="line"><span class="attr">"followerCount"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"wordCount"</span>: <span class="number">4273279</span>,</span><br><span class="line"><span class="attr">"serializeWordCount"</span>: <span class="number">4268</span>,</span><br><span class="line"><span class="attr">"retentionRatio"</span>: <span class="string">"54.34"</span>,</span><br><span class="line"><span class="attr">"updated"</span>: <span class="string">"2019-05-16T16:03:50.745Z"</span>,</span><br><span class="line"><span class="attr">"isSerial"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"chaptersCount"</span>: <span class="number">552</span>,</span><br><span class="line"><span class="attr">"lastChapter"</span>: <span class="string">"第八卷 思无邪 第五百四十九章 横剑在膝四顾茫然"</span>,</span><br><span class="line"><span class="attr">"gender"</span>: [<span class="string">"male"</span>],</span><br><span class="line"><span class="attr">"tags"</span>: [<span class="string">"古典仙侠"</span>, <span class="string">"坚毅"</span>, <span class="string">"孤儿"</span>, <span class="string">"热血"</span>],</span><br><span class="line"><span class="attr">"advertRead"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"cat"</span>: <span class="string">"古典仙侠"</span>,</span><br><span class="line"><span class="attr">"donate"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"_gg"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"isForbidForFreeApp"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"isAllowNetSearch"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"limit"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"copyrightDesc"</span>: <span class="string">"本书由上海元聚进行电子本制作与发行"</span>,</span><br><span class="line"><span class="attr">"discount"</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实吧，打开一本书的时候就有这个请求：<br><code>https://*.zhuishushenqi.com/book/592fe687c60e3c4926b040ca</code>，域名有变动，固定的是后面的部分，那个字符串是追书神器给书编的id值，用get请求就能得到上面的json数据。基本上一本书的所有数据都在里面了，我们要做的就是在这个数据被追书神器拿到之前对它做一点点的修改即可。</p><p>对比了几本书，发现换源功能的开关由<code>&quot;_le&quot;: false</code>决定，这个值为false的书不能换源，反之则反。所以在过滤器的<code>响应信息体回传前</code>里面添加一个规则，条件为空，然后添加一个表达式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^@rsp.bodyText "_le":false" "_le":true"</span><br><span class="line">^为插入或替换符，@rsp.bodyText表示响应（response）的（body）信息体。</span><br></pre></td></tr></table></figure><p>这句话的大概意思呢就是把_le”:false替换成_le”:true，第一个双引号里面写的原值，第二个里面写着替换值。</p><p>保存之后开启这个过滤器然后在<code>书架以外</code>的地方打开任何一本书都能看到换源选项，进入阅读之后就可以把Thor关掉了，追书神器就是这么<del>智能</del>，只有刚打开一本书的时候会判断究竟能不能换源….然后有一点是这个抓到的数据包比较多，所以在过滤的基础设置里面的<code>关键字选项</code>添加一个<code>/book</code>，因为每次请求一本书都有这个path，然后其他的数据包都不会抓取，节省空间。</p><p>然后咱们要开启vip功能，这里先在<code>关键字选项</code>那里添加一个<code>/user</code>，然后在断点里面再添加一个表达式:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^@rsp.bodyText "isMonthly":false" "isMonthly":true"</span><br><span class="line">^@rsp.bodyText "monthly":\d+" "monthly":1000000000"</span><br></pre></td></tr></table></figure><p>这个也很好抓，在打开追书神器之后就会有这个信息，在个人信息里面。第一个式子的作用和前面那个换源一样，把false改成true，当然这里只改一个是没用的，还需要把monthly修改一下，这个是剩余的天数，这个数字没注意怎么算的，随便打就完事了（可怜我花了12块钱才发现这个数字很大很大），这里保存之后重启追书神器就…广告都没了，暂时就是vip用户了，我大概试了一下，vip用户的功能大概都有，所以…追书神器这个破解真的很简单啊。</p><p>有了vip用户就去除了广告，所以就不用分析怎么去广告了（这玩意web选手能做？），vip用户特权里面有一条“免费阅读部分数据”，随便点开一本vip免费阅读的书籍，切换到后面收费章节…提示！！网络错误连接。好吧，不知道怎么搞的，虽然提示我是vip，但是实际上我还是一个假的vip，这个vip真正做到的只有去广告…但是，好像还挺不错的。</p><p>但是我想到了一点，追书神器里面书籍分类其实有点多。第一，vip免费读；第二，所有章节免费读；第三，普通用户免费读vip用户免费读的书，但是隔一页一个广告，也就是参合着广告读书；第四，部分章节免费，后面章节收费，vip用户打折购买。</p><p>首先，<code>假vip</code>没办法读vip免费读的书，然后也不打折…那我要这个vip有何用…bingo，把所有的书全部搞成免费读且非vip用户免费读，首先，添加两条规则：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^@rsp.bodyText "allowFree":false" "allowFree":true"</span><br><span class="line">^@rsp.bodyText "allowMonthly":true" "allowMonthly":false"</span><br></pre></td></tr></table></figure><p>其中allowFree控制的是该书能不能免费读，当然，把所有书的值都搞成true就行了，然后要把所有的allowMonthly的值改成false，因为前面证明vip是假的，根本没办法读那些包月用户的书籍，所有把这些书搞成不是包月的，同时又是免费的，什么概念呢？就是所有书都变成了可以免费读但是要看广告的那种….前面那个假的vip刚好可以去广告….所有书都是免费读，无广告，不可缓存，正版源…</p><h3 id="有什么必要"><a href="#有什么必要" class="headerlink" title="有什么必要"></a>有什么必要</h3><p>不是加了一个换源功能吗？还要搞这么多干什么，后面搞那么多其实也就是为了去广告和阅读正版源，如果有钱，何必这么麻烦呢？支持就好了…但是没钱，草…</p><p>前面还有说到一个<code>OPTIONS</code>方法，其实就是用在解密这一块，正版源只有部分章节免费，我们请求收费的章节的时候得到的不是章节内容，而是一个混合加密的东西，很长串，而且需要用key去解密。我们用购买，点击广告获得key值之后就有一个<code>OPTIONS</code>请求，然后那串加密文本就解密了，我想大概解密过程还是在服务器段，软件段还是只接受，对于这个请求，没用返回值，得不到章节的真正信息，它就那么突然的解密之后出现在了软件上，不然我可以用爬虫模拟点击广告获得每个章节的key值，然后请求真正的文本信息…真正搞定正版源这一块还是有点不可能的，虽然追书神器的信息结构有点简单，但是章节内容加密只管用那些超强加密方法就行了….前面那个其实算一个取巧过程，不过也挺好的，只是得不到真正的正版源文本有点可惜。</p><blockquote><p><a href="https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/blog/04E33804-ACC7-40A1-967C-BF192F65F228.MP4" target="_blank" rel="noopener">点击观看录像</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;文章末尾有录屏&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;得益于Thor的强大功能，给追书神器添加换源功能，早在一个月前就实现了。从最开始完全搞不懂Thor的用法到现在能完整的写一个过滤器出来还是有很大进步的，刚开始我觉得写一个过滤器需要许多专业知识…然后就退缩了，很长时间没有去理会这个。后来去学Python爬虫的时候发现需要抓包，所以又拿出了这个工具，手机用Thor，电脑用Fiddler，成功的写了几个还算有用的爬虫。&lt;/p&gt;
&lt;p&gt;其实吧，使用Thor并不是很难，有耐心就够了，半天就可以熟练使用，但是真要弄出一个过滤器需要分析大量的请求信息，耐心才是最重要的。但是我有点困惑，这玩意！！花了我好多时间，到底有个什么用，哭了…&lt;/p&gt;
&lt;p&gt;之前抓过追书神器的很多包了，现在一些常见的接口还是知道，当然，网上有人整理了追书神器的接口啦：&lt;a href=&quot;https://github.com/xiadd/zhuishushenqi&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gayhub&lt;/a&gt;。不过这些接口没啥用….又不是写爬虫，要这个干嘛！！！&lt;/p&gt;
    
    </summary>
    
      <category term="实用教程" scheme="https://blog.iplua.com/categories/%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="iOS" scheme="https://blog.iplua.com/tags/iOS/"/>
    
      <category term="抓包" scheme="https://blog.iplua.com/tags/%E6%8A%93%E5%8C%85/"/>
    
      <category term="Thor" scheme="https://blog.iplua.com/tags/Thor/"/>
    
      <category term="阅读" scheme="https://blog.iplua.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>那些遇到的“钓鱼网站”</title>
    <link href="https://blog.iplua.com/about-phishing-sites/"/>
    <id>https://blog.iplua.com/about-phishing-sites/</id>
    <published>2019-05-10T08:46:00.000Z</published>
    <updated>2019-05-16T13:07:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>每天在使用各种社交软件的同时难免会遇到一些“钓鱼网站”，这些所谓的钓鱼网站就是一些无聊的人弄出来的，其特点就是和官方的网站很相似，很多情况下我们一个不小心就….昨天下午碰到了一个钓鱼网站，特点是好友留言提到所有人，然后有一张图片里面写着扫描二维码查看回忆录…扫描二维码之后就会出现一个QQ空间登录的界面…</p><p>当时可能网络不好或者那个人服务器不好，输入账号密码的时候都卡卡的，所以我密码输错了，点了登录之后就跳到了一个图片（dog)，那时候我才发现这是钓鱼网站，自己警惕性还是太差了呀，虽然没什么大碍，最主要还是麻烦到朋友了，搞不好QQ就冻结了…他那个页面如下，在手机端真的很像很像…就下面那个网站，往死里的打</p><a id="more"></a><p><img src="https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/2019-05-10/5cd53a12f0c50.png" alt="1"></p><p>这个钓鱼网站其实也不是太贱，算一种恶搞吧，扫描二维码之后输入账号密码点确定…之后好像是一个QQ官方的api接口，自动给自己空间留言（同样是那张二维码，还提到了所有人），然后有人或许又会去扫描那个二维码（比如我），然后…一直一直，关键这个不需要其他操作，只要网站没被封就可以一直弄下去，也不知道这个钓鱼网站存在多久了，本着学习的初衷（无聊）我把这个页面爬下来了…或许算学到了一点点东西吧…</p><p><img src="https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/2019-05-10/5cd53b87eac1f.png" alt="2"></p><p>他原本有些资源是用的三方cdn的，图片也是url引用的，不过我不是太喜欢那样子，所有就全部搞成本地了。东西不多，不过还是搞不太懂，看源码的时候感觉还…挺厉害的，原谅我没学过js和php，php里面竟然可以直接写js代码….其实钓鱼的原理很简单，首先输入账号和密码的“键盘”都是有监控的，也就是我们输入的账号和密码都会记录下来…</p><p><img src="https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/2019-05-10/5cd53cbee486e.png" alt="3"></p><p>然后它有一个简单的判断账号密码是否错误，账号，大概就是大于五位还是六位的纯数字吧，密码是存了一些弱密码然后用Escape加密的，反正就是简单的几个判断…然后输入登录键之后就会发起一个get请求，是用的QQ官方的api接口，也就是说，只要用到了正确的账号和密码，不需要登录就可以直接在空间留言等等，大致上钓鱼网站就是这样子的，我不是太清楚账号和密码这个钓鱼网站有没有存下来，看js源码时没有保存的，直接用到了api请求。</p><p><img src="https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/2019-05-10/5cd53e2154048.png" alt="4"></p><p>对于这种网站，直接打死就好了…无聊的人服务器GG就完事了…好吧我连用工具DDOS都不会，我是守法的好公民，还是举报好，在源代码的时候最主要的感觉就是：垃圾排版，就不能好好空行嘛？就不能写注释嘛？就不能命名规范一点嘛？没事改编码，unicode编码…base64加密…Escape加密…阅读起来真的麻烦，php文件里面写js代码是什么习惯，还有就是<code>write()</code>函数，其实index.html里面没有东西，仅仅是加载了个script（为什么加载script源文件是一个php文件，又写的js代码？靠），然后覆盖了index.html的内容，照我说不如直接写，为什么要这么麻烦？难道另有玄机？…这种钓鱼网站太常见了，多长点心眼就好，不过以前有一种钓鱼网站是只要打开了就会被盗用QQ，不知道什么原理，用api请求需要cookie没错，难道点开那个网站的瞬间就把我的cookie拿去了？有点玄乎…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每天在使用各种社交软件的同时难免会遇到一些“钓鱼网站”，这些所谓的钓鱼网站就是一些无聊的人弄出来的，其特点就是和官方的网站很相似，很多情况下我们一个不小心就….昨天下午碰到了一个钓鱼网站，特点是好友留言提到所有人，然后有一张图片里面写着扫描二维码查看回忆录…扫描二维码之后就会出现一个QQ空间登录的界面…&lt;/p&gt;
&lt;p&gt;当时可能网络不好或者那个人服务器不好，输入账号密码的时候都卡卡的，所以我密码输错了，点了登录之后就跳到了一个图片（dog)，那时候我才发现这是钓鱼网站，自己警惕性还是太差了呀，虽然没什么大碍，最主要还是麻烦到朋友了，搞不好QQ就冻结了…他那个页面如下，在手机端真的很像很像…就下面那个网站，往死里的打&lt;/p&gt;
    
    </summary>
    
      <category term="生活点滴" scheme="https://blog.iplua.com/categories/%E7%94%9F%E6%B4%BB%E7%82%B9%E6%BB%B4/"/>
    
    
      <category term="钓鱼网站" scheme="https://blog.iplua.com/tags/%E9%92%93%E9%B1%BC%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>Java学习笔记01</title>
    <link href="https://blog.iplua.com/java-note1/"/>
    <id>https://blog.iplua.com/java-note1/</id>
    <published>2019-04-25T11:33:00.000Z</published>
    <updated>2019-05-16T14:13:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="到底学个啥啊"><a href="#到底学个啥啊" class="headerlink" title="到底学个啥啊~"></a>到底学个啥啊~</h2><p>Java肯定是要学的，一门如此优秀的面向对象语言，使用范围也很广很广，学校还没开课，先当预习一下。至于有同学说，你这又是学C/C++，又是学Python，现在又搞一个Java，你是要上天呀，学这么多又学的浅有什么用吗？霍霍，肿么没用了？C/C++适合刷题，Python只是最近在弄爬虫这块，好歹也写了几个实用的爬虫出来了。至于Java呢？到目前我想不到对我有什么实际的用处，我尝试去刷题，但是不是很习惯，比如字符串处理，在C++中用String定义一个字符串，它可以直接当作数组来用，而Java似乎不能这样做…各种方法各种类有点难记。另外Java也可以写爬虫，但还没有学那么深，就不想那么多了。</p><a id="more"></a><p><code>我在B站学Java</code>，推荐<a href="https://www.bilibili.com/video/av24496128" target="_blank" rel="noopener">尚学堂Java 300集</a>。其实看书也听实在的，但是有一个人讲肯定是更加容易理解一些的（当然，排除念PPT的老师…），想起来在B站看过不少的视频了…此乃<code>真</code>学习网站，谁说Bilibili不好我和谁急了。此外，由于Java本就是基于C语言开发的，所以面向过程的东西我大概都选择性跳过了，感觉问题<del>不是很大</del>…好吧，从面向对象开始吧，万物皆对象。</p><h2 id="类与对象的概念"><a href="#类与对象的概念" class="headerlink" title="类与对象的概念"></a>类与对象的概念</h2><p>在生活中随处可见的有男生和女生，其“男”和“女”便是<code>类</code>，而说到某一个人，人们总会想到她是一个女生（属于女生这个类），同时她的名字、年龄、身高等等（对象的属性）。也就是每一个人都是独一无二的<code>对象</code>，这便是生活中的类与对象…</p><p>在Java中其实没太大的区别，比如下段代码中首先是<del>导入了一个包</del>，其中有一个<code>public</code>修饰的类<code>Stu01</code>，这便是java中的类。而<code>ob01</code>就是<code>Stu01</code>的实例，也就是对象。类的实例化可以引用类的属性和方法。</p><blockquote><p>类可以看成是创建对象的模板。<br>对象可以看作类的实例化</p></blockquote><p>上面说的呢？其实也就是一种<code>造车</code>，我有一张图纸（类），我根据这张图纸造了一辆车（对象）…对象有自己的属性和行为（方法），其实Java的类就好比C语言中的结构体的升级版…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Study01</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String sex;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"来一起玩耍吧~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Study01 ob01 = <span class="keyword">new</span> Study01();</span><br><span class="line">        ob01.name = <span class="string">"天天"</span>;</span><br><span class="line">        ob01.sex = <span class="string">"男"</span>;</span><br><span class="line">        ob01.age = <span class="number">18</span>;</span><br><span class="line">        ob01.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="什么是方法？"><a href="#什么是方法？" class="headerlink" title="什么是方法？"></a>什么是方法？</h2><p>类是方法和属性的集合，至于属性不就是在类里面定义的成员变量吗？那方法呢？方法是什么？方法有什么要点呢？</p><p>先看方法的概念：Java方法是语句的集合，它们在一起执行一个功能。<br><del>这不就是C语言中的<code>函数</code>吗？</del></p><p>再看方法的定义：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class="line">    ...</span><br><span class="line">    方法体</span><br><span class="line">    ...</span><br><span class="line">    return 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>等等，这就是C语言的函数！！！</p></blockquote><p>其实，Java的方法和C语言的函数很相似，只不过C语言的函数定义没有<code>修饰符</code>一说。<br>规则：方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头写，不使用连接符。例如：addPerson<br>另外类的名字应该以大小字母开头，好吧，这写规则在学C语言的时候没听到过，这里还是记住为好，代码规范很重要。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Study02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"来一起玩耍吧~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getMaxNum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">(<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.14</span> * r * r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"来一起学习吧~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// play();     //运行报错</span></span><br><span class="line">        study();    <span class="comment">//可以直接使用static修饰的方法</span></span><br><span class="line"></span><br><span class="line">        Study02 ob01 = <span class="keyword">new</span> Study02();</span><br><span class="line">        <span class="keyword">int</span> MaxNum = ob01.getMaxNum(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">double</span> Area = ob01.getArea(<span class="number">4</span>);</span><br><span class="line">        System.out.println(MaxNum);</span><br><span class="line">        System.out.println(Area);</span><br><span class="line">        ob01.study();</span><br><span class="line">        ob01.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面给出了四个方法，分别用<code>public private protected static</code>修饰，其中<code>static</code>修饰的方法可以不用实例化就能激活的方法。就好比咱们在C语言中写完主函数之后又写了一个自定义函数，我们可以在主函数或者其他函数中来调用这个函数。而其他三个方法需要实例化才能激活，也就是说咱们要先有对象才能有行为…就是这个样子了。</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>构造方法也称构造器，它本质上还是一个方法，构造方法就是用来<code>new</code>对象的。<br>每一个Java程序都有构造方法，像前面那个程序没写构造方法，但是JVM会自动生成一个空构造方法。其实构造方法和普通方法的区别只是在于构造方法没有返回值，它的名字和类名一样，它的作用是构建对象。</p><h2 id="方法的重载（Overload"><a href="#方法的重载（Overload" class="headerlink" title="方法的重载（Overload)"></a>方法的重载（Overload)</h2><p>Java中同名的方法可以有多个，只要参数不一样就好了，Java会自动判断用哪个方法。比如下面的程序，它有两个构造方法<code>Study03()</code>，还有两个<code>test()</code>方法，在新建那两个对象的时候可以看到，我们给<code>a</code>和<code>b</code>赋值是不一样的，第一个是用的空构造方法，第二个是带参数的构造方法，可以看到第二种会更加简便，所以我们一般都会自己写构造方法，而不是用空构造方法。其中的<code>this</code>是代指这个对象，就是说<code>this</code>就代表的<code>ob02</code>。</p><p>同样的调用<code>test()</code>方法的时候，加了参数和不加参数的结果完全不一样，说明那是不同的两个方法。其实在使用<code>out</code>对象的方法的时候，它有很多选择，在其中可以发现有许多许多<code>print()</code>方法，只是参数不一样，可见重载还是挺常见的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Study03</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Study03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Study03</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给我传值干嘛"</span> + n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"测试~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Study03 ob01 = <span class="keyword">new</span> Study03();</span><br><span class="line">        ob01.a = <span class="number">12</span>;</span><br><span class="line">        ob01.b = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line">        Study03 ob02 = <span class="keyword">new</span> Study03(<span class="number">15</span>, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        ob01.test();</span><br><span class="line">        ob01.test(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        ob02.test();</span><br><span class="line">        ob01.test(<span class="number">999</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象创建的过程"><a href="#对象创建的过程" class="headerlink" title="对象创建的过程"></a>对象创建的过程</h2><p><code>构造方法</code>是创建Java对象的重要途径，通过<code>new关键字</code>调用构造器时，构造器也确实返回该类的对象，但这个对象并不是完全由构造方法负责创建。创建一个对象分为如下四步：<br>1.分配对象空间，并将对象<code>成员变量</code>初始化为0或空<br>2.执行<code>属性</code>值的显示初始化<br>3.执行构造方法<br>4.返回对象的地址给相关的<code>变量</code></p><h3 id="this的本质"><a href="#this的本质" class="headerlink" title="this的本质"></a>this的本质</h3><p><code>this</code>的本质就是<code>创建好的对象的地址</code>，由于在构造方法调用前，对象已经创建。因此，在构造方法中也可以使用<code>this</code>代表<code>当前对象</code>。</p><p><code>this</code>最常的用法：<br>1.在程序中产生<code>二义性</code>之处，应使用this来指明<code>当前对象</code>；普通方法中，<code>this</code>总是指向调用该方法的对象。构造方法中，this总是指向正要初始化的对象。<br>2.使用<code>this</code>关键字调用重载的构造方法，避免相同的初始化代码。但只能在构造方法中用，并且必须位于构造方法的<code>第一行</code>。</p><blockquote><p>this不能用于static方法中</p></blockquote><h3 id="使用this关键字的示例"><a href="#使用this关键字的示例" class="headerlink" title="使用this关键字的示例"></a>使用this关键字的示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Study07</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法重载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Study07</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在调用构造方法之前对象实际上已经创建好了，this代指这个对象</span></span><br><span class="line">        System.out.println(<span class="string">"当前对象地址: "</span> + <span class="keyword">this</span> + <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//该方法局部变量和该类的成员变量名相同，用this.属性来代指</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Study07</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用this()调用构造方法，必须在第一行</span></span><br><span class="line">        <span class="keyword">this</span>(name);</span><br><span class="line">        <span class="comment">//在调用构造方法之前对象实际上已经创建好了，this代指这个对象</span></span><br><span class="line">        System.out.println(<span class="string">"当前对象地址: "</span> + <span class="keyword">this</span> + <span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里，当一个对象调用这个方法是，实质上对象已经确定（对象是类的实例化）</span></span><br><span class="line">        System.out.println(<span class="string">"当前对象地址: "</span> + <span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//实质上id是指实例化的属性（也就是对象）</span></span><br><span class="line">        System.out.println(<span class="string">"用户: "</span> + id);</span><br><span class="line">        System.out.println(<span class="string">"用户: "</span> + <span class="keyword">this</span>.id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Study07 user01 = <span class="keyword">new</span> Study07(<span class="number">101</span>, <span class="string">"序曲"</span>);</span><br><span class="line">        System.out.println(user01.name);</span><br><span class="line">        user01.check();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// this关键字不能用于静态方法中</span></span><br><span class="line">        <span class="comment">// System.out.println(this.name);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h3><p>在类中，用<code>static</code>声明的成员变量为静态成员变量，也称为类变量。 类变量的生命周期和类相同，在整个应用程序执行期间都有效。它有如下特点：</p><p>1.为该类的公用变量，属于类，被该类的所有实例共享，在类被载入时被显式初始化。<br>2.对于该类的所有对象来说，static成员变量只有一份。被该类的所有对象共享!!<br>3.一般用“类名.类属性/方法”来调用。(也可以通过对象引用或类名(不需要实例化)访问静态成员。)<br>4.在static方法中不可直接访问非static的成员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> b;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//不需实例化即可使用静态属性</span></span><br><span class="line">        a = <span class="number">0</span>;</span><br><span class="line">        Test.a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//必须实例化才能使用</span></span><br><span class="line">        Test obj01 = <span class="keyword">new</span> Test();</span><br><span class="line">        obj01.b = <span class="number">6</span>;</span><br><span class="line">        <span class="comment">// 此时obj01.a == 0</span></span><br><span class="line"></span><br><span class="line">        Test obj02 = <span class="keyword">new</span> Test();</span><br><span class="line">        obj02.b = <span class="number">60</span>;</span><br><span class="line">        obj02.a = <span class="number">6000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//此时a == Test.a == obj01.a == obj02.b == 6000</span></span><br><span class="line">        <span class="comment">//如C语言中的全局变量，牵一发动全身，其它对象的该属性也会被更改</span></span><br><span class="line">        <span class="comment">//静态属性（a）从属于类，成员变量（b）从属于对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;到底学个啥啊&quot;&gt;&lt;a href=&quot;#到底学个啥啊&quot; class=&quot;headerlink&quot; title=&quot;到底学个啥啊~&quot;&gt;&lt;/a&gt;到底学个啥啊~&lt;/h2&gt;&lt;p&gt;Java肯定是要学的，一门如此优秀的面向对象语言，使用范围也很广很广，学校还没开课，先当预习一下。至于有同学说，你这又是学C/C++，又是学Python，现在又搞一个Java，你是要上天呀，学这么多又学的浅有什么用吗？霍霍，肿么没用了？C/C++适合刷题，Python只是最近在弄爬虫这块，好歹也写了几个实用的爬虫出来了。至于Java呢？到目前我想不到对我有什么实际的用处，我尝试去刷题，但是不是很习惯，比如字符串处理，在C++中用String定义一个字符串，它可以直接当作数组来用，而Java似乎不能这样做…各种方法各种类有点难记。另外Java也可以写爬虫，但还没有学那么深，就不想那么多了。&lt;/p&gt;
    
    </summary>
    
      <category term="Java学习" scheme="https://blog.iplua.com/categories/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="https://blog.iplua.com/tags/Java/"/>
    
      <category term="面向对象" scheme="https://blog.iplua.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫实例：抓取音乐</title>
    <link href="https://blog.iplua.com/python-web-crawler-music/"/>
    <id>https://blog.iplua.com/python-web-crawler-music/</id>
    <published>2019-04-16T13:56:13.000Z</published>
    <updated>2019-05-19T13:54:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>第三方图床真折腾，先是新浪图床防盗链，再是sm图片无缘无故删图片，服了哦…</p><p>上次做完了一个抓取贴吧图片的爬虫，当时就感觉爬虫也就那么一回事…然而今天做这个实例的时候发现上次的爬虫实在太简陋了，抓取图片只要审查页面元素就好了，一下子就找到超链接了，实在是无趣了一些。相比于上一次的实例，这次学到的东西更多了…不过对于网络这块还是一窍不通，实在不想深入了解这方面。</p><p>做完这个爬虫有一天了，昨天花了很多时间去实现功能，今天花了很多时间去优化以及尝试其它平台。然而，现在各大音乐平台都很难去找到接口，更加不可能抓到付费或者无版权的歌曲…也不代表没有把，肯定也有大神搞到接口…对于我这种小白，就只能抓想想了…</p><a id="more"></a><h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>这次的实例是抓取千千音乐的歌曲…(付费，免费，无版权，有版权都行！！！)</p><p>首先点开一首可以正常播放的歌曲，然后添加到播放列表，然后进入网站自带的播放器界面，也就是：<a href="http://play.taihe.com/" target="_blank" rel="noopener">此处</a></p><p><img src="https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/2019-05-13/5cd97ee69e8c6.png" alt="1"></p><hr><p>然后我们<code>F12</code>查看元素，发现在<code>Elements</code>里面是找不到歌曲链接的，因此用前面学到的知识没办法继续下去，不过没关系，<code>chrome</code>不只有这一个功能，我们点开 <code>Network</code>选项，此处是加载的资源概况。慢慢找，可以看到一个<code>name.mp3</code>的元素挺显眼的，歌曲也是<code>mp3</code>格式的，所以就是说这个资源就是服务器给我们浏览器的，而且我们打开这个<code>URL</code>发现正好就是演员这首歌曲，而且还可以直接下载，那不就好了，之后想下载什么歌曲就这样找什么歌曲呗。</p><p><img src="https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/2019-05-13/5cd9833d782ba.png" alt="2"></p><h2 id="链接分析"><a href="#链接分析" class="headerlink" title="链接分析"></a>链接分析</h2><p>但是。。。咱们是为了学爬虫，手动下载一首歌有啥用？那我要把薛之谦的歌曲全部下载下来呢，难道要一个个手动去下载？那很累，不建议，而且这样获取不到那些收费和无版权歌曲。所以咱们分析一下那个<code>URL</code>吧。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://zhangmenshiting.qianqian.com/data2/music/a70ef051941a4a620d15d9588845f46c/612410195/612410195.mp3?xcode=031ff7d93638dabe2e999d51bc758b81</span><br></pre></td></tr></table></figure><p><code>http</code>协议开头，然后是一个二级域名<code>zhangmenshiting.qianqian.com</code>再接了一个目录<code>data2/music/</code>。比较其他歌曲的<code>URL</code>发现只有前面的部分是一样的，就是说千千音乐服务器根据歌曲来给不同的<code>URL</code>，所以我们要做的就是找到这个链接的规律，然后爬虫就可以批量下载歌曲了。</p><p>每首歌的<code>URL</code>不一样，而且都带了一个不同<code>xcode</code>，暂且不看其他部分，<code>xcode</code>肯定是关键词。但是在这个界面我们是想不到<code>xcode</code>从哪里来的，我们换个思路，既然可以找到歌曲链接，所以服务器那边一定把链接<code>藏</code>在哪个地方了。所以我们直接在控制台搜索<code>xcode</code>值。</p><p><img src="https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/2019-05-13/5cd97f11cf8d9.png" alt="3"></p><h2 id="寻找有用的信息"><a href="#寻找有用的信息" class="headerlink" title="寻找有用的信息"></a>寻找有用的信息</h2><p>好吧，我们索引之后发现只有三个文件带有那个<code>xcode</code>，可以发现前面两个文件就是第一次找的那个<code>.mp3</code>文件（为什么是两个…）。直接看第三个文件吧。点开<code>songlink</code>（直译不就是歌曲链接？），可以看到以下的信息。<br><img src="https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/2019-05-13/5cd9836e1f5da.png" alt="4"></p><p>可以看到头部有四个部分，分别是：<code>General</code> <code>Response Headers</code> <code>Requesr Headers</code> <code>Form Data</code><br>这里就不多提了，关于网络的东西足够学好久了，只看请求链接和请求协议以及数据。<br><a href="http://play.taihe.com/data/music/songlink" target="_blank" rel="noopener">URL</a>在这，一个POST请求，直接手动打开是没有什么东西的，因为<code>POST</code>请求需要带有<code>data</code>参数，所以这也就是为什么有一个<code>From data</code>，所以就是说我们让爬虫携带<code>data</code>然后对这个<code>URL</code>发起<code>POST</code>请求不就好了？当然，这是后面要做的，现在还是好好分析这个文件，头部看完了就直接看响应信息体<code>response</code>吧，其它的还是跳过为好。</p><hr><p>由于<code>response</code>是没有格式化的，所以直接截图的<code>Preview</code>也就是经过浏览器处理后的信息。<br><img src="https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/2019-05-13/5cd9822d3b624.png" alt="5"></p><p>这里信息可真是多啊，基本这首歌的信息全有了，可以看到<code>xcode</code>就在这里…而且之前那个链接也在这里（刷新界面链接会变化，所以和上面的链接不同是正常的）。其实我们可以想到，是先有这个文件再有之前那个<code>.mp3</code>文件的，就是从这个文件中拿到<code>xcode</code>或者说拿到歌曲<code>URL</code>然后再获取到歌曲，我们才听到歌曲了。到这里分析就完了，下面整理如下思路。</p><p>我们找的一个漏洞就是这个网页自带的播放器，先有播放器后有歌曲。意思呢就是打开播放器，如果播放器中有很多歌曲，服务器首先要返回这些歌曲的资源信息给我们，总不能说我们不听它就不返回数据吧，也就是说打开播放器服务器就已经把歌曲信息发给我们了，不信可以多添加几首歌曲进来，会发现<code>songLink</code>会有那些歌的所有信息。也就是说我们只要对<code>http://play.taihe.com/data/music/songlink</code>发起<code>POST</code>请求就可以得到那个<code>Response</code>，响应信息体里面也有我们想要歌曲的<code>URL</code>，有了歌曲的<code>URL</code>我们就可以直接保存信息了，所以这就是大致的思路。</p><h2 id="爬虫开始第一步请求"><a href="#爬虫开始第一步请求" class="headerlink" title="爬虫开始第一步请求"></a>爬虫开始第一步请求</h2><p>第一步肯定是对这个链接发起请求，与<code>GET</code>请求不同的是<code>POST</code>需要携带参数才行，也就是说之前看到的那个<code>From data</code>我们需要加进去，但是我过滤了其他默认的数据，就是发起请求的时候只加<code>songIds</code>，其实也就是歌曲的<code>ID</code>值，这个值很好找，随便点开一首歌曲，它<code>URL</code>的结尾就是它的<code>ID</code>。这里还用演员的<code>ID</code>，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">Root_url = <span class="string">"http://play.taihe.com/data/music/songlink"</span></span><br><span class="line">From_data = &#123;<span class="string">'songIds'</span>: <span class="string">'242078437'</span>&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url = Root_url, data = From_data)</span><br></pre></td></tr></table></figure><p>这里发起请求之后<code>response</code>可不是服务器看到的那些数据o，它是一个响应信息，就是发起了<code>POST</code>请求之后返回的状态码，打印出来就是<code>&lt;Response [200]&gt;</code>，百度可以知道<code>200</code>是正常响应值，也就是说咱们的请求成功了，这一刻，神州沸腾了…好吧，回到之前，既然我们用浏览器的控制台可以看到响应正常后的那些数据，那这里怎么看数据呢？</p><p>其实吧，这些数据很常见，前两天我改<code>bilibili</code>个人信息的时候也是改的这种数据，不卖关子了，也就是<code>json</code>数据，我们可以把浏览器的控制台里面的<code>Response</code>里面的信息复制出来，然后找一个<code>JSON</code>数据格式化的网站，格式化之后就可以看得很清楚了，那这里我们也就调用<code>response.json()</code>就好了，数据如下（刚才好像千千音乐把我的IP屏蔽了…爬虫不犯法吧，学习…我只是为了学习…）。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">'errorCode': 22000,</span><br><span class="line">'data': &#123;</span><br><span class="line">'time': 3600,</span><br><span class="line">'xcode': '7cf461c96271034822dcc64431de272b',</span><br><span class="line">'songList': [&#123;</span><br><span class="line">'queryId': '242078437',</span><br><span class="line">'status': 0,</span><br><span class="line">'songId': 242078437,</span><br><span class="line">'songName': '演员',</span><br><span class="line">'artistId': '88',</span><br><span class="line">'artistName': '薛之谦',</span><br><span class="line">'albumId': 241838068,</span><br><span class="line">'albumName': '初学者',</span><br><span class="line">'lrcLink': 'http://qukufile2.qianqian.com/data2/lrc/d2dd6042c4b233b2e902206a2f2447bf/612410245/612410245.lrc',</span><br><span class="line">'time': 261,</span><br><span class="line">'linkCode': 22000,</span><br><span class="line">'songLink': 'http://zhangmenshiting.qianqian.com/data2/music/15414b755fbf0ab7caaac12957051f3a/612410192/612410192.mp3?xcode=471de392a76515a808a65907a49a17b0',</span><br><span class="line">'showLink': 'http://zhangmenshiting.qianqian.com/data2/music/15414b755fbf0ab7caaac12957051f3a/612410192/612410192.mp3?xcode=471de392a76515a808a65907a49a17b0',</span><br><span class="line">'format': 'mp3',</span><br><span class="line">'rate': 128,</span><br><span class="line">'size': 4182351,</span><br><span class="line">'linkinfo': None,</span><br><span class="line">'version': '',</span><br><span class="line">'copyType': 0,</span><br><span class="line">'enhancement': '3.019997'</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>这个数据里面就有我们想要的数据，怎么提取出来呢？这外边是一个字典，取出<code>data</code>，发现<code>data</code>还是一个字典，再取出<code>songList</code>，发现<code>songList</code>是只有一个元素且这个元素是字典的列表，好吧，那就取出<code>songList[0]</code>，也就是用一个字典保存，然后保存我们想要的数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, pprint</span><br><span class="line"></span><br><span class="line">Root_url = <span class="string">"http://play.taihe.com/data/music/songlink"</span></span><br><span class="line">From_data = &#123;<span class="string">'songIds'</span>: <span class="string">'242078437'</span>&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url = Root_url, data = From_data)</span><br><span class="line">music_info = response.json()[<span class="string">'data'</span>][<span class="string">'songList'</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">albumName = music_info[<span class="string">'albumName'</span>]</span><br><span class="line">artistName = music_info[<span class="string">'artistName'</span>]</span><br><span class="line">lrcLink = music_info[<span class="string">'lrcLink'</span>]</span><br><span class="line">showLink = music_info[<span class="string">'showLink'</span>]</span><br><span class="line">songName = music_info[<span class="string">'songName'</span>]</span><br></pre></td></tr></table></figure><p>保存了专辑名，作者名，歌词链接，歌曲链接，歌曲名字，数据如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">演员</span><br><span class="line">初学者</span><br><span class="line">薛之谦</span><br><span class="line">http://qukufile2.qianqian.com/data2/lrc/d2dd6042c4b233b2e902206a2f2447bf/612410245/612410245.lrc</span><br><span class="line">http://zhangmenshiting.qianqian.com/data2/music/15414b755fbf0ab7caaac12957051f3a/612410192/612410192.mp3?xcode=90cad862d2e3eb0b3d7cab37c0a62272</span><br></pre></td></tr></table></figure><p>好吧，到这里就完事了，我们有了歌曲名，有了各种信息，而且有了歌曲链接还不是我们手动去找的，何乐而不为呢？下面就保存吧。完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, os</span><br><span class="line"></span><br><span class="line">Root_url = <span class="string">"http://play.taihe.com/data/music/songlink"</span></span><br><span class="line">From_data = &#123;<span class="string">'songIds'</span>: <span class="string">'242078437'</span>&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url = Root_url, data = From_data)</span><br><span class="line">music_info = response.json()[<span class="string">'data'</span>][<span class="string">'songList'</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">albumName = music_info[<span class="string">'albumName'</span>]</span><br><span class="line">artistName = music_info[<span class="string">'artistName'</span>]</span><br><span class="line">lrcLink = music_info[<span class="string">'lrcLink'</span>]</span><br><span class="line">songLink = music_info[<span class="string">'songLink'</span>]</span><br><span class="line">songName = music_info[<span class="string">'songName'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># path = 'D:\\temp\\'</span></span><br><span class="line"><span class="comment"># os.chdir(path)</span></span><br><span class="line"><span class="comment"># os.mkdir(artistName)</span></span><br><span class="line"><span class="comment"># os.chdir(path + artistName)</span></span><br><span class="line"><span class="comment"># os.mkdir(albumName)</span></span><br><span class="line"><span class="comment"># os.chdir(path + artistName + "\\" + albumName)</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"正在保存歌曲："</span> + songName)</span><br><span class="line">response = requests.get(songLink)</span><br><span class="line"><span class="keyword">with</span> open(songName + <span class="string">'.mp3'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(response.content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print("正在保存歌词...")</span></span><br><span class="line">response = requests.get(lrcLink)</span><br><span class="line"><span class="keyword">with</span> open(songName + <span class="string">'.lrc'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(response.content)</span><br><span class="line">print(<span class="string">"执行完毕..."</span>)</span><br></pre></td></tr></table></figure><p><img src="https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/2019-05-13/5cd97f46e6b80.png" alt="6"></p><h2 id="如何批量获取？"><a href="#如何批量获取？" class="headerlink" title="如何批量获取？"></a>如何批量获取？</h2><p>通过上面的代码只要更换<code>ID</code>值就可以抓到任意歌曲…(如果千千音乐服务器有那首歌)，不过这就完了吗？就这样的话我就不好说学到了很多东西了…继续往下走。咱们一次只抓一首歌还是太慢了，虽然比人手动快，但是<code>ID</code>值竟然还要我们自己去找，简直….不可理喻啊。我最主要的目的是为了什么？学习，附带把周杰伦的歌下载下来，嘿嘿。现在千千音乐是没有周杰伦的版权的，那么用上面那段代码更换<code>ID</code>能不能行呢？可以试一试哦~</p><p>我们需要一个歌曲列表，就好比下面的：<br><img src="https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/2019-05-13/5cd9814c6c41a.png" alt="7"></p><p>全是灰色的呀，想起以前，听歌怎么会收费，怎么会有版权一说？世代在变化，现在歌曲慢慢注重收费版权等等，而抄袭借鉴也被越来越重视…就比如莫裁缝，某花…还是不说这些了，我还是更注重歌好听与否。这里我们可以看到一个列表，像第一个爬虫一样，找id是一件很简单事情，开始吧。</p><p><img src="https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/2019-05-13/5cd9819c32876.png" alt="8.png"></p><p>我们就是要找到这些<code>a</code>标签<code>href</code>里面的那串数字，那就是我们需要的歌曲<code>ID</code>，和上一个不同的是这次使用的正则表达式获取，相对而言更专业一些？好吧，其实前几天改bilibili数据的时候也接触到了正则表达式，发现也不是那么的难，具体还是看代码吧，哦，忘记了，需要一个模块<code>re</code>。找到了所有的<code>ID</code>值再用一个循环请求呗，没毛病。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">song_list_url = <span class="string">"http://music.taihe.com/artist/7994"</span></span><br><span class="line">response = requests.get(url = song_list_url)</span><br><span class="line">id_list = re.findall(<span class="string">'href="/song/(\\d+)"'</span>, response.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> song_id <span class="keyword">in</span> id_list:</span><br><span class="line">    Root_url = <span class="string">"http://play.taihe.com/data/music/songlink"</span></span><br><span class="line">    From_data = &#123;<span class="string">'songIds'</span>: song_id&#125;</span><br><span class="line"></span><br><span class="line">    response = requests.post(url = Root_url, data = From_data)</span><br><span class="line">    music_info = response.json()[<span class="string">'data'</span>][<span class="string">'songList'</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    albumName = music_info[<span class="string">'albumName'</span>]</span><br><span class="line">    artistName = music_info[<span class="string">'artistName'</span>]</span><br><span class="line">    lrcLink = music_info[<span class="string">'lrcLink'</span>]</span><br><span class="line">    songLink = music_info[<span class="string">'songLink'</span>]</span><br><span class="line">    songName = music_info[<span class="string">'songName'</span>]</span><br><span class="line"></span><br><span class="line">    path = <span class="string">'D:\\temp\\'</span></span><br><span class="line">    os.chdir(path)</span><br><span class="line">    <span class="comment"># os.mkdir(artistName)</span></span><br><span class="line">    <span class="comment"># os.chdir(path + artistName)</span></span><br><span class="line">    <span class="comment"># os.mkdir(albumName)</span></span><br><span class="line">    <span class="comment"># os.chdir(path + artistName + "\\" + albumName)</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"正在保存歌曲："</span> + songName)</span><br><span class="line">    response = requests.get(songLink)</span><br><span class="line">    <span class="keyword">with</span> open(songName + <span class="string">'.mp3'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(response.content)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print("正在保存歌词...")</span></span><br><span class="line">    response = requests.get(lrcLink)</span><br><span class="line">    <span class="keyword">with</span> open(songName + <span class="string">'.lrc'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(response.content)</span><br><span class="line">    print(<span class="string">"执行完毕..."</span>)</span><br></pre></td></tr></table></figure><p><img src="https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/2019-05-13/5cd97f947eb15.png" alt="9.png"></p><h2 id="为什么只有一页？"><a href="#为什么只有一页？" class="headerlink" title="为什么只有一页？"></a>为什么只有一页？</h2><p>还没完，可以看到上面的输出，其实抓完一页爬虫就停了，也很正常，我们没有翻页，当然只能获取到第一页歌曲的<code>ID</code>，接下来就翻页吧。</p><p><img src="https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/2019-05-13/5cd97fa7a7b70.png" alt="10.png"></p><p>好了，咱们手动翻页完了，很简单对不对，只要点一下就行了，但是爬虫做不到。不难发现，我们点击第二页之后浏览器上面那个<code>URL</code>并没有变化，而且第二页那个按钮或者是那个下一页都不是特定的超链接，经过百度“翻页URL不变”发现这种界面是动态刷新的，就是点下一页的时候之刷新局部内容而不是整个页面，这个技术叫做<code>ajax</code>，好巧好巧，我们两个星期帮同学做一个<code>.NET</code>小项目“实时聊天室”的时候就接触到了这个东西，它就是局部刷新聊天界面的，有信息就刷新，而我们这个页面点下一页或者第几页就刷新对应的内容。</p><p>我们这个爬虫做不到，但是有一个叫做<code>webdriver</code>的东西能做到，这东西需要百度使用，类似于让爬虫模拟人的行为去浏览器获取信息，就是自动化的打开浏览器然后执行操作，具体事先如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, re, os, time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">song_list_url = <span class="string">"http://music.taihe.com/artist/7994"</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(song_list_url)</span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    response = driver.page_source</span><br><span class="line">    id_list = re.findall(<span class="string">'href="/song/(\\d+)"'</span>, response)</span><br><span class="line">    isEnd = BeautifulSoup(response, <span class="string">'html.parser'</span>).find(<span class="string">'span'</span>, class_=<span class="string">'page-navigator-next'</span>)</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span> song_id <span class="keyword">in</span> id_list:</span><br><span class="line">        Root_url = <span class="string">"http://play.taihe.com/data/music/songlink"</span></span><br><span class="line">        From_data = &#123;<span class="string">'songIds'</span>: song_id&#125;</span><br><span class="line"></span><br><span class="line">        response = requests.post(url = Root_url, data = From_data)</span><br><span class="line">        music_info = response.json()[<span class="string">'data'</span>][<span class="string">'songList'</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        albumName = music_info[<span class="string">'albumName'</span>]</span><br><span class="line">        artistName = music_info[<span class="string">'artistName'</span>]</span><br><span class="line">        lrcLink = music_info[<span class="string">'lrcLink'</span>]</span><br><span class="line">        songLink = music_info[<span class="string">'songLink'</span>]</span><br><span class="line">        songName = music_info[<span class="string">'songName'</span>]</span><br><span class="line"></span><br><span class="line">        path = <span class="string">'D:\\temp\\'</span></span><br><span class="line">        os.chdir(path)</span><br><span class="line">        <span class="comment"># os.mkdir(artistName)</span></span><br><span class="line">        <span class="comment"># os.chdir(path + artistName)</span></span><br><span class="line">        <span class="comment"># os.mkdir(albumName)</span></span><br><span class="line">        <span class="comment"># os.chdir(path + artistName + "\\" + albumName)</span></span><br><span class="line"></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        print(str(i) + <span class="string">".正在保存歌曲："</span> + songName)</span><br><span class="line">        response = requests.get(songLink)</span><br><span class="line">        <span class="keyword">with</span> open(songName + <span class="string">'.mp3'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.content)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#print("正在保存歌词...")</span></span><br><span class="line">        response = requests.get(lrcLink)</span><br><span class="line">        <span class="keyword">with</span> open(songName + <span class="string">'.lrc'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.content)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isEnd:</span><br><span class="line">        print(<span class="string">"点击下一页..."</span>)</span><br><span class="line">        driver.find_element_by_link_text(<span class="string">'&gt;'</span>).click()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"所有页面已遍历完成"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/2019-05-13/5cd97fbe3a2a9.png" alt="11.png"></p><p>到这里其实实现差不多了，<code>webdriver</code>是一个很好用的工具，这里就不多提了，百度有很具体的用法。我判断最后一页用的一个<code>isEnd</code>，它的原理在于最后一个<code>&gt;</code>变成了一个<code>span</code>标签，如果到最后一页这个外面的循环就直接跳出。但是有一点是如果歌手下面的评论有多页，也就是不只有一个<code>&gt;</code>，爬虫就会绕很大的弯，还有就是如果歌曲链接是空或者歌词链接为空程序会报错停止，也就是说在保存的时候我们需要判断一下，具体还有很多细节处理，这里就不一一写出来了。</p><h2 id="但是，这样就完了吗？"><a href="#但是，这样就完了吗？" class="headerlink" title="但是，这样就完了吗？"></a>但是，这样就完了吗？</h2><p>不，还没有完，最后还得提一点，我们一直没有关注的<code>Cookies</code>，这个东西是什么呢？有什么作用呢？怎么用呢？</p><p><img src="https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/2019-05-13/5cd983b92e50a.png" alt="12.png"></p><p>这么一长串的东西，可以百度一下<code>Cookies</code>的作用…稍微介绍一下，服务器会对<code>Cookies</code>进行分析来判断我们是以什么身份发起请求的，简单的说就是你登录了和没有登录是不一样的!!!记住，这点很重要，如果你有一个会员账号，那么你就可以请求到高音质的歌曲，所以这个<code>Cookies</code>就可以用来…很巧，我们爬虫完全可以携带这个<code>Cookies</code>来发起请求，也就是说我们携带一个<code>Cookies</code>发起请求可以得到高音质的音乐链接，然后保存…嘿嘿嘿。当然，前提是你有会员账号的<code>Cookies</code>而且这个<code>Cookies</code>有效期不是很短很短的那种（有点网址刷新<code>Cookies</code>很快）。其实还有一种办法，就是让我们的爬虫先登录再请求，就是登录之后的<code>Cookies</code>来请求的了，哈哈，那怎么模拟登录呢？又是一个坑点，这里千千音乐的登录界面是类似弹窗的，需要复杂一点的实现，我弄了一下发现搞不上去就用的自己手动登录的<code>Cookies</code>，到这里实例就差不多了。</p><h2 id="之后呢？"><a href="#之后呢？" class="headerlink" title="之后呢？"></a>之后呢？</h2><p>其实吧，今天我看了很多网站，发现都没有这么容易抓取，就是说像<code>QQ音乐</code>，<code>网易云音乐</code>这种都是没办法直接抓付费或者无版权音乐的，它们的请求<code>URL</code>不像千千音乐这个是不变的。</p><p>就比如QQ音乐，它连歌曲列表都给你藏起来了，叫你下载客户端才能显示完全，你说这不…其实这种情况也不是没办法，我们可以用各种抓包软件抓到歌曲的<code>ID</code>，我用手机的<code>Thor</code>也抓到了，但是又有什么办法呢？付费歌曲只给你一分钟，明面上咱们都找不到完整歌曲的链接，而且没有像千千音乐这种先播放器后音乐的逻辑。</p><p>说实话千千音乐真的不是很完善，也许它以后也会改版吧。所以趁现在还可以爬取一些音乐就爬一下吧，学习…忘记说了，<code>QQ音乐</code>的请求<code>URL</code>带了一堆参数，是一堆，你<code>QQ号</code>也带进去了，还有一个随机的<code>vkey</code>….反正我是找不到它的接口…继续学习吧，这次还是学到了许多新知识了，慢慢进步了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第三方图床真折腾，先是新浪图床防盗链，再是sm图片无缘无故删图片，服了哦…&lt;/p&gt;
&lt;p&gt;上次做完了一个抓取贴吧图片的爬虫，当时就感觉爬虫也就那么一回事…然而今天做这个实例的时候发现上次的爬虫实在太简陋了，抓取图片只要审查页面元素就好了，一下子就找到超链接了，实在是无趣了一些。相比于上一次的实例，这次学到的东西更多了…不过对于网络这块还是一窍不通，实在不想深入了解这方面。&lt;/p&gt;
&lt;p&gt;做完这个爬虫有一天了，昨天花了很多时间去实现功能，今天花了很多时间去优化以及尝试其它平台。然而，现在各大音乐平台都很难去找到接口，更加不可能抓到付费或者无版权的歌曲…也不代表没有把，肯定也有大神搞到接口…对于我这种小白，就只能抓想想了…&lt;/p&gt;
    
    </summary>
    
      <category term="Python学习" scheme="https://blog.iplua.com/categories/Python%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="https://blog.iplua.com/tags/python/"/>
    
      <category term="爬虫" scheme="https://blog.iplua.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="音乐" scheme="https://blog.iplua.com/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>第一张黑洞照片？！！</title>
    <link href="https://blog.iplua.com/black-hole-pic/"/>
    <id>https://blog.iplua.com/black-hole-pic/</id>
    <published>2019-04-10T13:49:00.000Z</published>
    <updated>2019-05-16T09:32:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E/10952?fr=aladdin" target="_blank" rel="noopener">黑洞</a>是<a href="https://baike.baidu.com/item/%E5%B9%BF%E4%B9%89%E7%9B%B8%E5%AF%B9%E8%AE%BA/472897" target="_blank" rel="noopener">现代广义相对论</a>中，宇宙空间内存在的一种<a href="https://baike.baidu.com/item/%E5%A4%A9%E4%BD%93/749823" target="_blank" rel="noopener">天体</a>。黑洞的引力很大，使得视界内的逃逸速度大于<a href="https://baike.baidu.com/item/%E5%85%89%E9%80%9F/363222" target="_blank" rel="noopener">光速</a>。“黑洞是时空曲率大到光都无法从其事件视界逃脱的天体”。<br>1916年，德国天文学家<a href="https://baike.baidu.com/item/%E5%8D%A1%E5%B0%94%C2%B7%E5%8F%B2%E7%93%A6%E8%A5%BF" target="_blank" rel="noopener">卡尔·史瓦西</a>通过计算得到了<a href="https://baike.baidu.com/item/%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6" target="_blank" rel="noopener">爱因斯坦</a><a href="https://baike.baidu.com/item/%E5%BC%95%E5%8A%9B%E5%9C%BA%E6%96%B9%E7%A8%8B" target="_blank" rel="noopener">引力场方程</a>的一个真空解，这个解表明，如果将大量物质集中于空间一点，其周围会产生奇异的现象，即在质点周围存在一个界面——<a href="https://baike.baidu.com/item/%E8%A7%86%E7%95%8C/2399273" target="_blank" rel="noopener">“视界”</a>一旦进入这个界面，即使光也无法逃脱。这种“不可思议的天体”被美国物理学家<a href="https://baike.baidu.com/item/%E7%BA%A6%E7%BF%B0%C2%B7%E9%98%BF%E5%A5%87%E5%8D%9A%E5%B0%94%E5%BE%B7%C2%B7%E6%83%A0%E5%8B%92/1983397" target="_blank" rel="noopener">约翰·阿奇博尔德·惠勒</a>命名为“黑洞”。<br>黑洞无法直接观测，但可以借由间接方式得知其存在与质量，并且观测到它对其他事物的影响。借由物体被吸入之前的因高热而放出和γ<a href="https://baike.baidu.com/item/%E5%B0%84%E7%BA%BF/327964" target="_blank" rel="noopener">射线</a>的“边缘讯息”，可以获取黑洞存在的讯息。推测出黑洞的存在也可借由间接观测<a href="https://baike.baidu.com/item/%E6%81%92%E6%98%9F/493" target="_blank" rel="noopener">恒星</a>或<a href="https://baike.baidu.com/item/%E6%98%9F%E9%99%85%E4%BA%91" target="_blank" rel="noopener">星际云</a>气团绕行轨迹取得位置以及质量。<br>北京时间2019年4月10日21时，在美国华盛顿、中国上海和台北、智利圣地亚哥、比利时布鲁塞尔、丹麦灵比和日本东京将同时召开新闻发布会，以英语、汉语、西班牙语、丹麦语和日语发布“事件视界望远镜”的第一项重大成果。</p><a id="more"></a><blockquote><p>上述摘自百度百科，下图便是第一张黑洞照片</p></blockquote><p><img src="https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/blog/IMG_0132.JPG" alt="1"></p><p>曾经只是在各种科幻片看到过黑洞的样子，我们大家都知道是假的，但是还是被这神秘的天体所吸引，连光都逃不出来，它的引力该有多强啊。但是今天我们第一次看到了由人类拍摄的黑洞照片，同事证明了爱因斯坦的理论是正确的，不过这个黑洞没有我们在星际穿越中看到的那样美丽，我们是无法看到黑洞周围的恒星的，看不到光，那这种照片是怎么拍出来的呢？专家解释说黑洞周围有气体云，在引力的作用下会坍缩…（忘记了），然后会有热辐射，而人类就是探测这种辐射，也就是波，最后合成的图像，因此，如果我们正常的去看，黑洞的另外一面我们是永远看不到的。</p><p>以后还会有更多的黑洞照片发布，希望人类物理学发展越来越好吧，走出这个地球，走出这个太阳系，或许有一天，真能看到走向宇宙的那一天呢。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E9%BB%91%E6%B4%9E/10952?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;黑洞&lt;/a&gt;是&lt;a href=&quot;https://baike.baidu.com/item/%E5%B9%BF%E4%B9%89%E7%9B%B8%E5%AF%B9%E8%AE%BA/472897&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;现代广义相对论&lt;/a&gt;中，宇宙空间内存在的一种&lt;a href=&quot;https://baike.baidu.com/item/%E5%A4%A9%E4%BD%93/749823&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;天体&lt;/a&gt;。黑洞的引力很大，使得视界内的逃逸速度大于&lt;a href=&quot;https://baike.baidu.com/item/%E5%85%89%E9%80%9F/363222&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;光速&lt;/a&gt;。“黑洞是时空曲率大到光都无法从其事件视界逃脱的天体”。&lt;br&gt;1916年，德国天文学家&lt;a href=&quot;https://baike.baidu.com/item/%E5%8D%A1%E5%B0%94%C2%B7%E5%8F%B2%E7%93%A6%E8%A5%BF&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;卡尔·史瓦西&lt;/a&gt;通过计算得到了&lt;a href=&quot;https://baike.baidu.com/item/%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;爱因斯坦&lt;/a&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E5%BC%95%E5%8A%9B%E5%9C%BA%E6%96%B9%E7%A8%8B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;引力场方程&lt;/a&gt;的一个真空解，这个解表明，如果将大量物质集中于空间一点，其周围会产生奇异的现象，即在质点周围存在一个界面——&lt;a href=&quot;https://baike.baidu.com/item/%E8%A7%86%E7%95%8C/2399273&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;“视界”&lt;/a&gt;一旦进入这个界面，即使光也无法逃脱。这种“不可思议的天体”被美国物理学家&lt;a href=&quot;https://baike.baidu.com/item/%E7%BA%A6%E7%BF%B0%C2%B7%E9%98%BF%E5%A5%87%E5%8D%9A%E5%B0%94%E5%BE%B7%C2%B7%E6%83%A0%E5%8B%92/1983397&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;约翰·阿奇博尔德·惠勒&lt;/a&gt;命名为“黑洞”。&lt;br&gt;黑洞无法直接观测，但可以借由间接方式得知其存在与质量，并且观测到它对其他事物的影响。借由物体被吸入之前的因高热而放出和γ&lt;a href=&quot;https://baike.baidu.com/item/%E5%B0%84%E7%BA%BF/327964&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;射线&lt;/a&gt;的“边缘讯息”，可以获取黑洞存在的讯息。推测出黑洞的存在也可借由间接观测&lt;a href=&quot;https://baike.baidu.com/item/%E6%81%92%E6%98%9F/493&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;恒星&lt;/a&gt;或&lt;a href=&quot;https://baike.baidu.com/item/%E6%98%9F%E9%99%85%E4%BA%91&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;星际云&lt;/a&gt;气团绕行轨迹取得位置以及质量。&lt;br&gt;北京时间2019年4月10日21时，在美国华盛顿、中国上海和台北、智利圣地亚哥、比利时布鲁塞尔、丹麦灵比和日本东京将同时召开新闻发布会，以英语、汉语、西班牙语、丹麦语和日语发布“事件视界望远镜”的第一项重大成果。&lt;/p&gt;
    
    </summary>
    
      <category term="生活点滴" scheme="https://blog.iplua.com/categories/%E7%94%9F%E6%B4%BB%E7%82%B9%E6%BB%B4/"/>
    
    
      <category term="新闻" scheme="https://blog.iplua.com/tags/%E6%96%B0%E9%97%BB/"/>
    
  </entry>
  
  <entry>
    <title>用python生成词云</title>
    <link href="https://blog.iplua.com/python-wordcloud/"/>
    <id>https://blog.iplua.com/python-wordcloud/</id>
    <published>2019-04-09T15:14:53.000Z</published>
    <updated>2019-04-15T09:53:44.094Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://baike.baidu.com/item/%E8%AF%8D%E4%BA%91/6952822" target="_blank" rel="noopener">“词云”</a>这个概念由美国西北大学新闻学副教授、新媒体专业主任里奇·戈登（Rich Gordon）于近日提出。戈登做过编辑、记者，曾担任迈阿密先驱报（Miami Herald）新媒体版的主任。他一直很关注网络内容发布的最新形式——即那些只有互联网可以采用而报纸、广播、电视等其它媒体都望尘莫及的传播方式。通常，这些最新的、最适合网络的传播方式，也是最好的传播方式。 因此，“词云”就是对网络文本中出现频率较高的“关键词”予以视觉上的突出，形成“关键词云层”或“关键词渲染”，从而过滤掉大量的文本信息，使浏览网页者只要一眼扫过文本就可以领略文本的主旨。</p><p>我们用python生成词云需要用到第三方库<a href="https://github.com/amueller/word_cloud" target="_blank" rel="noopener">wordcloud</a>，官方的安装说明是这样的。</p><p>wordcloud depends on <code>numpy</code> and <code>pillow</code>.To save the wordcloud into a file, <code>matplotlib</code> can also be installed. See examples below.If there are no wheels available for your version of python, installing the package requires having a C compiler set up. Before installing a compiler, report an issue describing the version of python and operating system being used.</p><a id="more"></a><p>也就是说….不管那么多…装好pip之后我们直接<code>pip install wordcloud</code>，注意一点是在<code>windows(windows10 1709)</code>上面需要<code>Microsoft Visual C++ 14.0</code>这个库，然而这个库在微软官网已经没有下载了，它应该是被集成到其他库里面了，所以最后想用<code>pip</code>安装就必须得安装整个<code>Microsoft Visual C++</code>，大约是6G…而<code>linux(deepin15.9.3)</code>环境上需要再装一个模块<code>tkinter</code>，这个在终端执行<code>pip install python3-tk</code>即可，至此可以放心的导入<code>wordcloud</code>了。</p><p>有四个模块需要了解<code>wordcoud numpy PIL jieba</code>，由于只是用到了它们其中的某一个方法，所以没有了解多深，大致的用法知道就好了。开始的开始，我们是…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"> </span><br><span class="line">text = <span class="string">"富强 民主 文明 和谐 自由 平等 公正 法制 爱国 敬业 诚信 友善"</span></span><br><span class="line">nu = WordCloud(background_color=<span class="string">"white"</span>)</span><br><span class="line"></span><br><span class="line">nu.generate(text)</span><br><span class="line">nu.to_image()</span><br><span class="line">nu.to_file(<span class="string">"test.png"</span>)</span><br></pre></td></tr></table></figure><p>从<code>wordcloud</code>导入<code>WordCloud</code>方法，注意大小写。为什么这样导入不如看下面的写法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n = WordCloud(background_color=<span class="string">"white"</span>)</span><br><span class="line">m = wordcloud.Wordcloud(backgroud_color=<span class="string">"white"</span>, font_path=<span class="string">"/home/nullptr/Downloads/src/msyh.ttc"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>代码能简则简吧。</p></blockquote><p>我们首先设置了一个用空格隔开的字符串，然后设置一个<code>WordCloud</code>方法的对象<code>nu</code>（不知道这样是不是正确的…类与对象实在不熟…Python万物皆为对象应该没错！！！）<br>在方法里面设置了这个对象的属性<code>backgroud_color</code>为白色（其他属性待会列表），然后是字体<code>font_path</code>一定要注意，默认是不支持中文的，所以去找一个支持中文的字体加进来就好了。然后下面三行就是调用<code>generate</code>方法初始化，调用<code>to_image</code>转化成图像，最后保存到文件<code>to_file</code>方法。就完事了…效果如下:</p><p><img src="https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/temp/1.png" alt="1"></p><p>然后完善一点，jieba模块就不搞了，要做出一个好看的词云在处理字符串这块需要花费很多心思，之前我打算做QQ群聊天各昵称的一个词云，把每一个人的名称都给截出来了，然后用空格隔开来（没用jieba)，但是最后生成的词云。还是很难看，我也没啥办法…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy, jieba</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"> </span><br><span class="line">text = <span class="string">"富强 民主 文明 和谐 自由 平等 公正 法制 爱国 敬业 诚信 友善"</span></span><br><span class="line"></span><br><span class="line">mk = numpy.array(Image.open(<span class="string">"/home/nullptr/Downloads/src/ChinaMap.png"</span>))</span><br><span class="line">nu = WordCloud(background_color=<span class="string">"white"</span>, font_path=<span class="string">"/home/nullptr/Downloads/src/msyh.ttc"</span>,</span><br><span class="line">               mask=mk, repeat=<span class="literal">True</span>, contour_width=<span class="number">1</span>, contour_color=<span class="string">"red"</span>, colormap=<span class="string">"Reds"</span>,</span><br><span class="line">               max_words=<span class="number">300</span>).generate(text)</span><br><span class="line"></span><br><span class="line">nu.to_image()</span><br><span class="line">nu.to_file(<span class="string">"/home/nullptr/Downloads/src/2.png"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/temp/2.png" alt="2"></p><blockquote><p>参考: <a href="https://www.cnblogs.com/jiayongji/p/7119065.html" target="_blank" rel="noopener">jieba</a>模块用法，以及wordcloud各个参数介绍。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">font_path : string //字体路径，需要展现什么字体就把该字体路径+后缀名写上，如：font_path = &apos;黑体.ttf&apos;</span><br><span class="line"></span><br><span class="line">width : int (default=400) //输出的画布宽度，默认为400像素</span><br><span class="line"></span><br><span class="line">height : int (default=200) //输出的画布高度，默认为200像素</span><br><span class="line"></span><br><span class="line">prefer_horizontal : float (default=0.90) //词语水平方向排版出现的频率，默认 0.9 （所以词语垂直方向排版出现频率为 0.1 ）</span><br><span class="line"></span><br><span class="line">mask : nd-array or None (default=None) //如果参数为空，则使用二维遮罩绘制词云。如果 mask 非空，设置的宽高值将被忽略，遮罩形状被 mask 取代。除全白（#FFFFFF）的部分将不会绘制，其余部分会用于绘制词云。如：bg_pic = imread(&apos;读取一张图片.png&apos;)，背景图片的画布一定要设置为白色（#FFFFFF），然后显示的形状为不是白色的其他颜色。可以用ps工具将自己要显示的形状复制到一个纯白色的画布上再保存，就ok了。</span><br><span class="line"></span><br><span class="line">scale : float (default=1) //按照比例进行放大画布，如设置为1.5，则长和宽都是原来画布的1.5倍。</span><br><span class="line"></span><br><span class="line">min_font_size : int (default=4) //显示的最小的字体大小</span><br><span class="line"></span><br><span class="line">font_step : int (default=1) //字体步长，如果步长大于1，会加快运算但是可能导致结果出现较大的误差。</span><br><span class="line"></span><br><span class="line">max_words : number (default=200) //要显示的词的最大个数</span><br><span class="line"></span><br><span class="line">stopwords : set of strings or None //设置需要屏蔽的词，如果为空，则使用内置的STOPWORDS</span><br><span class="line"></span><br><span class="line">background_color : color value (default=”black”) //背景颜色，如background_color=&apos;white&apos;,背景颜色为白色。</span><br><span class="line"></span><br><span class="line">max_font_size : int or None (default=None) //显示的最大的字体大小</span><br><span class="line"></span><br><span class="line">mode : string (default=”RGB”) //当参数为“RGBA”并且background_color不为空时，背景为透明。</span><br><span class="line"></span><br><span class="line">relative_scaling : float (default=.5) //词频和字体大小的关联性</span><br><span class="line"></span><br><span class="line">color_func : callable, default=None //生成新颜色的函数，如果为空，则使用 self.color_func</span><br><span class="line"></span><br><span class="line">regexp : string or None (optional) //使用正则表达式分隔输入的文本</span><br><span class="line"></span><br><span class="line">collocations : bool, default=True //是否包括两个词的搭配</span><br><span class="line"></span><br><span class="line">colormap : string or matplotlib colormap, default=”viridis” //给每个单词随机分配颜色，若指定color_func，则忽略该方法。</span><br><span class="line"></span><br><span class="line">fit_words(frequencies)  //根据词频生成词云</span><br><span class="line">generate(text)  //根据文本生成词云</span><br><span class="line">generate_from_frequencies(frequencies[, ...])   //根据词频生成词云</span><br><span class="line">generate_from_text(text)    //根据文本生成词云</span><br><span class="line">process_text(text)  //将长文本分词并去除屏蔽词（此处指英语，中文分词还是需要自己用别的库先行实现，使用上面的 fit_words(frequencies) ）</span><br><span class="line">recolor([random_state, color_func, colormap])   //对现有输出重新着色。重新上色会比重新生成整个词云快很多。</span><br><span class="line">to_array()  //转化为 numpy array</span><br><span class="line">to_file(filename)   //输出到文件</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E8%AF%8D%E4%BA%91/6952822&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;“词云”&lt;/a&gt;这个概念由美国西北大学新闻学副教授、新媒体专业主任里奇·戈登（Rich Gordon）于近日提出。戈登做过编辑、记者，曾担任迈阿密先驱报（Miami Herald）新媒体版的主任。他一直很关注网络内容发布的最新形式——即那些只有互联网可以采用而报纸、广播、电视等其它媒体都望尘莫及的传播方式。通常，这些最新的、最适合网络的传播方式，也是最好的传播方式。 因此，“词云”就是对网络文本中出现频率较高的“关键词”予以视觉上的突出，形成“关键词云层”或“关键词渲染”，从而过滤掉大量的文本信息，使浏览网页者只要一眼扫过文本就可以领略文本的主旨。&lt;/p&gt;
&lt;p&gt;我们用python生成词云需要用到第三方库&lt;a href=&quot;https://github.com/amueller/word_cloud&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wordcloud&lt;/a&gt;，官方的安装说明是这样的。&lt;/p&gt;
&lt;p&gt;wordcloud depends on &lt;code&gt;numpy&lt;/code&gt; and &lt;code&gt;pillow&lt;/code&gt;.To save the wordcloud into a file, &lt;code&gt;matplotlib&lt;/code&gt; can also be installed. See examples below.If there are no wheels available for your version of python, installing the package requires having a C compiler set up. Before installing a compiler, report an issue describing the version of python and operating system being used.&lt;/p&gt;
    
    </summary>
    
      <category term="Python学习" scheme="https://blog.iplua.com/categories/Python%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="https://blog.iplua.com/tags/python/"/>
    
      <category term="词云" scheme="https://blog.iplua.com/tags/%E8%AF%8D%E4%BA%91/"/>
    
      <category term="wordcloud" scheme="https://blog.iplua.com/tags/wordcloud/"/>
    
  </entry>
  
  <entry>
    <title>第一个Python爬虫</title>
    <link href="https://blog.iplua.com/python-web-crawler-first/"/>
    <id>https://blog.iplua.com/python-web-crawler-first/</id>
    <published>2019-04-06T10:52:53.000Z</published>
    <updated>2019-04-07T11:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711?fr=aladdin" target="_blank" rel="noopener">网络爬虫</a>（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。</p><p>如今Python这门语言越来越火，在外面看到的培训机构都有“Python爬虫”、“Python人工智能”这种招牌。而我们学校没有开设Python这一门课程，因此我学习Python仅仅是个人兴趣，也算是为以后的工作做一点点的准备吧。由于在此之前我都是用C/C++来做题目的，所以我对于Python的类与对象方面都不是很了解，我大概看了一下文档，有各种各样的由官方封装起来的方法供我们使用，还有很多第三方模块，总的来说对Python的第一印象是语法简单，涉及内容多。同时Python也是我学习的第一门面向对象的语言。希望自己能够好好体会<code>对象</code>的概念。</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>在我们使用各种开发工具的时候，一般会遇到开发环境配置的问题。先说<code>Dev-cpp</code>和<code>Visual Studio 201X</code>这种<code>IDE</code>,它们其实是包括了代码编辑器、编译器、调试器和图形用户界面等工具，所以这种工具的使用也很简单，只需要照常安装就行，然后写一个<code>&quot;Hello World</code>程序就成功了。</p><p>其实C/C++的编译器是GCC/G++，而上面所说的工具最核心的功能是调试阶段，可以实现语法高亮，自动提醒语法错误，设置断点等等功能。而编译的阶段其实是调用它自带的GCC/G++程序，于是一直到这里也没有涉及到开发环境的配置，也许很多人一直用Dev-cpp到大学毕业也不会配置一个C语言环境。</p><p>还是略过这一块比较好，只需要知道我们用<code>Visual Studio Code</code>来写一个C/C++程序是需要自己配置开发环境的。</p><p>在没有配置Python开发环境的前提下我们用记事本直接写一个<code>print(&quot;Hello World&quot;)</code>是无法执行的。其实Python的环境配置很简单（配置开发环境本就是一件很容易的事情），我们直接去<a href="https://www.python.org/" target="_blank" rel="noopener">官网</a>下载Windows的可执行程序就行了，在安装阶段就有添加<code>Python</code>到系统的<code>PATH</code>这一个选项，我们安装好之后就可以开心的使用Python了。打开<code>cmd</code>输入<code>python</code>就可以看到我们的python版本信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Python 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 21:26:53) [MSC v.1916 32 bit (Intel)] on win32</span><br></pre></td></tr></table></figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>写一个Python爬虫不是一件很难的事情。短短几十行代码就可以做到一个抓取某网站所有图片的功能，相比用C/C++刷题来说这个显得更有趣一些。于是打开了<code>Visual Studio Code</code>新建了一个文件<code>test.py</code></p><p>首先我们要知道python爬虫是一个什么原理。简要的说便是<code>一段程序自动打开一个网站，然后在网站上寻找自己需要的信息，最后把这些获取到的信息保存起来</code>，因此我们知道了大概的步骤，一个简单的爬虫就只需要三步就可以完成爬取工作。</p><h3 id="打开网页"><a href="#打开网页" class="headerlink" title="打开网页"></a>打开网页</h3><p>在官方文档中我们可以找到一个叫做<code>urllib</code>的模块，利用这个模块我们就可以写出一个简单的爬虫程序。但是，我们可以用到一个更加方便的Python的第三方模块<code>requests</code></p><blockquote><p>requests 是⽤Python语⾔编写，基于urllib，采⽤Apache2 Licensed开源协议的 HTTP 库。它⽐ urllib 更加⽅便，可以节约我们⼤量的⼯作，完全满⾜HTTP测试需求。</p></blockquote><p>相对而言人类总是喜欢简洁的，对比一下两者打开一个网页的语句就可以发现<code>requests</code>简洁优势。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response1 = requests.get(url = Weburl, headers = WebHead)</span><br><span class="line">response2 = urllib.request.urlopen(url = WebUrl, headers = WebHead)</span><br></pre></td></tr></table></figure><p>下面具体说一下如何使用<code>requests.get()</code>方法打开一个网站(以抓取百度贴吧精品图片为例)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">WebUrl = <span class="string">"https://tieba.baidu.com/f?kw=%E5%A3%81%E7%BA%B8&amp;ie=utf-8&amp;tab=good"</span></span><br><span class="line">WebHead = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>:<span class="string">'https://tieba.baidu.com'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url = WebUrl, headers = WebHead)</span><br></pre></td></tr></table></figure><p>在第一行我们需要导入<code>requests</code>模块，然后定义一下<code>WbeUrl</code>也就是我们需要爬虫去的网址。<br>然后需要了解一点是我们打开一个网站时会有相关信息集合在数据传输的头部<code>Headers</code>传给云端服务器校验。所以我们定义了一个<code>WebHead</code>来应对各种情况。有什么情况呢？就比如某些网站不允许爬虫进入，我们要做的就是修改上传的头部信息。</p><p><code>requests.get()</code>方法很轻松的做到了这一点，只需要在方法内部加入参数<code>headers</code>即可。<br><code>User-Agent</code>作用是服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。<br><code>Referer</code>作用呢是告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理。</p><p>到这里运行这一段代码是没有什么问题的。那么我们运行之后得到了什么呢？<br>可以通过<code>print(response.text)</code>来查看，可以看到许多许多排版乱糟糟的<code>HTML5/CSS3/JAVASCRIPT</code>语句，也就是说text信息也就是网站的源码。</p><h3 id="处理信息"><a href="#处理信息" class="headerlink" title="处理信息"></a>处理信息</h3><p>用<code>requests.get()</code>方法打开网站之后总不能不干事情，这里我选择用<code>BeautifulSoup</code>库来做下一步操作。本来一般来说写一个爬虫是需要用到正则表达式的，但是我太懒了太笨了，我选择<code>BeautifulSoup</code></p><blockquote><p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">Beautiful Soup</a> 是一个可以从HTML或XML文件中提取数据的Python库，它能够通过你喜欢的转换器实现惯用的文档导航，查找，修改文档的方式。Beautiful Soup会帮你节省数小时甚至数天的工作时间。</p></blockquote><p><code>BeautifulSoup</code>文档里面很清楚的讲了安装以及使用，所以我们开开心心的用就得了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">WebUrl = <span class="string">"https://tieba.baidu.com/f?kw=%E5%A3%81%E7%BA%B8&amp;ie=utf-8&amp;tab=good"</span></span><br><span class="line">WebHead = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>:<span class="string">'https://tieba.baidu.com'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url = WebUrl, headers = WebHead)</span><br><span class="line">soup = BeautifulSoup(response.text, <span class="string">'html.parser'</span>)</span><br></pre></td></tr></table></figure><p>通过<code>bs4</code>模块导入了<code>BeautifulSoup</code>，然后用<code>soup</code>变量存储<code>BeautifulSoup</code>以<code>html.parser</code>方法处理<code>response.text</code>之后得到的信息。这就是处理信息的过程，一行代码就可以了。</p><h3 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h3><p>我们手动打开网址<a href="https://tieba.baidu.com/f?kw=%E5%A3%81%E7%BA%B8&amp;ie=utf-8&amp;tab=good" target="_blank" rel="noopener">百度贴吧精品贴纸</a>可以看到的是很多很多的帖子，事实上我们的爬虫在上一步也就进行到了这一步，很明显，我们是需要抓取图片而不是在这个界面停留，而图片在每一个帖子里面，那么我们可以点击第一个帖子进入即可，但是爬虫不会自动点击进入，所以我们需要处理信息得到每一个帖子的<code>URL</code></p><p>这里我们需要审查网页元素，也就是检查网页的源代码。找帖子的<code>URL</code>不就是找对应的<code>a</code>标签嘛？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"thread_list"</span> <span class="attr">class</span>=<span class="string">"threadlist_bright j_threadlist_bright"</span>&gt;</span></span><br><span class="line">    ···</span><br><span class="line">    ···</span><br><span class="line">    ···</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>经过审查元素我们可以发现所有帖子都在这个列表里面，很显然我们要做的就是用<code>find()</code>方法找到这一个<code>ul</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">WebUrl = <span class="string">"https://tieba.baidu.com/f?kw=%E5%A3%81%E7%BA%B8&amp;ie=utf-8&amp;tab=good"</span></span><br><span class="line">WebHead = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>:<span class="string">'https://tieba.baidu.com'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url = WebUrl, headers = WebHead)</span><br><span class="line">soup = BeautifulSoup(response.text, <span class="string">'html.parser'</span>)</span><br><span class="line">a_list = soup.find(<span class="string">'ul'</span>, id=<span class="string">'thread_list'</span>).find_all(<span class="string">'a'</span>, class_=<span class="string">'j_th_tit'</span>)</span><br></pre></td></tr></table></figure><p>这里我们又添加了一个语句。前面得到的<code>soup</code>变量是经过处理的<code>BeautifulSoup</code>对象呀，所有我们可以用<code>find()</code>方法来获取信息了。用<code>BeautifulSoup</code>就省去了写正则表达式的麻烦，可以看到find()方法里面是两个参数<code>&#39;ul&#39;</code>和<code>id=&#39;thread_list&#39;</code>。也就是从text中找到一个id是thread_list的列表，但是找到了列表还没完。</p><p>我们需要的是帖子的链接而不是这个列表，我们用浏览器继续审查元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"threadlist_title pull_left j_th_tit "</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">"noreferrer"</span> <span class="attr">href</span>=<span class="string">"/p/4803144798"</span> <span class="attr">title</span>=<span class="string">"【壁纸】高清大图✨"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"j_th_tit "</span>&gt;</span>【壁纸】高清大图✨<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以发现，这个div里面的a标签不就是我们需要的嘛？对比其他帖子的链接，可以发现这些a标签都有同一个class，因此我们把这些a标签全部保存起来不就好了嘛？于是就有了<code>find_all()</code>方法，和前面的<code>find()</code>方法同理，加入对应的参数就可以了。当然，我们只是找到了而已，还需要保存起来，那么就用一个列表接受就好了。<br>用<code>print(a_list)</code>（错误用法，列表的输出不是这样子写）可以得到如下信息：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"j_th_tit"</span> <span class="attr">href</span>=<span class="string">"/p/4803144798"</span> <span class="attr">rel</span>=<span class="string">"noreferrer"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"【壁纸】高清大图✨"</span>&gt;</span>【壁纸】高清大图✨<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    ···</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"j_th_tit"</span> <span class="attr">href</span>=<span class="string">"/p/4645322258"</span> <span class="attr">rel</span>=<span class="string">"noreferrer"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"【壁纸】分享壁纸💗"</span>&gt;</span>【壁纸】分享壁纸💗<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    ···</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"j_th_tit"</span> <span class="attr">href</span>=<span class="string">"/p/4079735446"</span> <span class="attr">rel</span>=<span class="string">"noreferrer"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"【壁纸】少女の心"</span>&gt;</span>【壁纸】少女の心<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"j_th_tit"</span> <span class="attr">href</span>=<span class="string">"/p/4198993236"</span> <span class="attr">rel</span>=<span class="string">"noreferrer"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"【壁纸】天晴"</span>&gt;</span>【壁纸】天晴<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到<code>a_list</code>这个列表存储的是这些信息，但是还没完，我要a标签干嘛，不就是为了得到帖子的链接嘛？我只需要<code>href</code>的信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">post_url_list = []</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> a_list:</span><br><span class="line">    a[<span class="string">'href'</span>] = <span class="string">"https://tieba.baidu.com"</span> + a[<span class="string">'href'</span>]</span><br><span class="line">    post_url_list.append(a[<span class="string">'href'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出帖子的链接检查是否正确无误</span></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> post_url_list:</span><br><span class="line">    print(url)</span><br></pre></td></tr></table></figure><blockquote><p><code>a</code>标签里面的<code>href</code>里面是不全完整的链接，所以补全了再插入到<code>post_url_list</code>里面。</p></blockquote><p>可以看输出信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">https://tieba.baidu.com/p/4847606272</span><br><span class="line">https://tieba.baidu.com/p/4645322258</span><br><span class="line">https://tieba.baidu.com/p/4492902168</span><br><span class="line">https://tieba.baidu.com/p/3446797781</span><br><span class="line">https://tieba.baidu.com/p/4378860308</span><br><span class="line">https://tieba.baidu.com/p/4364768066</span><br><span class="line">https://tieba.baidu.com/p/4328735082</span><br><span class="line">https://tieba.baidu.com/p/4357276836</span><br><span class="line">https://tieba.baidu.com/p/4079735446</span><br><span class="line">···</span><br></pre></td></tr></table></figure><p>于是我们得到了当前页面所有帖子的链接，接下来就是进入每一个帖子（跌倒实现），到目前为止的完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">WebUrl = <span class="string">"https://tieba.baidu.com/f?kw=%E5%A3%81%E7%BA%B8&amp;ie=utf-8&amp;tab=good"</span></span><br><span class="line"></span><br><span class="line">WebHead = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'https://tieba.baidu.com'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url = WebUrl, headers = WebHead)</span><br><span class="line">soup = BeautifulSoup(response.text, <span class="string">'html.parser'</span>)</span><br><span class="line">a_list = soup.find(<span class="string">'ul'</span>, id=<span class="string">'thread_list'</span>).find_all(<span class="string">'a'</span>, class_=<span class="string">'j_th_tit'</span>)</span><br><span class="line"></span><br><span class="line">post_url_list = []</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> a_list:</span><br><span class="line">    a[<span class="string">'href'</span>] = <span class="string">"https://tieba.baidu.com"</span> + a[<span class="string">'href'</span>]</span><br><span class="line">    post_url_list.append(a[<span class="string">'href'</span>])</span><br></pre></td></tr></table></figure><h3 id="抓取目标"><a href="#抓取目标" class="headerlink" title="抓取目标"></a>抓取目标</h3><p>有了帖子的链接就好办了，我们只要进入每一个帖子，然后在里面寻找图片最后保存就好了呀。<br>有这么多链接在一个列表里面了，我们首先是需要迭代每一个帖子链接。我们人工操作，手动点入了一个帖子。看了看有很多人回帖，留住也放了很多图片，水贴的不少，酸酸怪也有，这里有各种各样的信息，我们需要的只是图片，我们审查元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"BDE_Image"</span> <span class="attr">src</span>=<span class="string">"https://imgsa.baidu.com/forum/w%3D580/sign=7a1e5400e8fe9925cb0c695804a95ee4/c9034c086e061d954a4c7bfd73f40ad163d9caeb.jpg"</span> <span class="attr">size</span>=<span class="string">"62546"</span> <span class="attr">width</span>=<span class="string">"506"</span> <span class="attr">height</span>=<span class="string">"900"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>右键图片审查元素就可以看到这个<code>img</code>标签。我们最后不就是需要这个<code>src</code>里面的链接吗？<br>刚才是人工做的，现在换成爬虫。爬虫进入第一个帖子的样子不是像极了爬虫第一次进入主页面的时候？所以操作很简答，和上面一样用<code>requests.get</code>方法打开帖子链接，然后用<code>BeautifulSoup</code>处理信息，然后用<code>find()</code>方法筛选信息…代码就是这样子了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> PostUrl <span class="keyword">in</span> post_url_list:</span><br><span class="line">    response_post = requests.get(url = PostUrl, headers = WebHead)</span><br><span class="line">    soup_post = BeautifulSoup(response_post.text, <span class="string">'html.parser'</span>)</span><br><span class="line">    img_url_list = soup_post.find_all(<span class="string">'img'</span>, class_ = <span class="string">'BDE_Image'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#输出图片的链接</span></span><br><span class="line">    <span class="keyword">for</span> ImgUrl <span class="keyword">in</span> img_url_list:</span><br><span class="line">        print(ImgUrl[<span class="string">'src'</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">···</span><br><span class="line">https://imgsa.baidu.com/forum/w%3D580/sign=6b419e4e8d82b9013dadc33b438ca97e/e537e5dde71190efd27b27b6c91b9d16fcfa60dd.jpg</span><br><span class="line">https://imgsa.baidu.com/forum/w%3D580/sign=9aef0b8db41c8701d6b6b2ee177e9e6e/4df7e0fe9925bc31e8fcb4f159df8db1cb13703c.jpg</span><br><span class="line">https://imgsa.baidu.com/forum/w%3D580/sign=10361301d609b3deebbfe460fcbe6cd3/ea11632762d0f703d7f721b50ffa513d2697c510.jpg</span><br><span class="line">https://imgsa.baidu.com/forum/w%3D580/sign=80ee8d6a8044ebf86d716437e9f8d736/b43d8794a4c27d1e39958fad1cd5ad6eddc4382e.jpg</span><br><span class="line">···</span><br></pre></td></tr></table></figure><p>好了，我们得到了终极目标，接下来只需要保存图片就行了。后面也就是迭代了，保存和切换路径都有固定的写法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, os</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">WebUrl = <span class="string">"https://tieba.baidu.com/f?kw=%E5%A3%81%E7%BA%B8&amp;ie=utf-8&amp;tab=good"</span></span><br><span class="line"></span><br><span class="line">WebHead = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'https://tieba.baidu.com'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url = WebUrl, headers = WebHead)</span><br><span class="line">soup = BeautifulSoup(response.text, <span class="string">'html.parser'</span>)</span><br><span class="line">a_list = soup.find(<span class="string">'ul'</span>, id=<span class="string">'thread_list'</span>).find_all(<span class="string">'a'</span>, class_=<span class="string">'j_th_tit'</span>)</span><br><span class="line"></span><br><span class="line">post_url_list = []</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> a_list:</span><br><span class="line">    <span class="keyword">if</span> a[<span class="string">'href'</span>] <span class="keyword">not</span> <span class="keyword">in</span> post_url_list:</span><br><span class="line">        a[<span class="string">'href'</span>] = <span class="string">"https://tieba.baidu.com"</span> + a[<span class="string">'href'</span>]</span><br><span class="line">        post_url_list.append(a[<span class="string">'href'</span>])</span><br><span class="line"></span><br><span class="line">path = <span class="string">'E:/贴吧精品壁纸/'</span></span><br><span class="line">os.chdir(path)</span><br><span class="line">j = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> PostUrl <span class="keyword">in</span> post_url_list:</span><br><span class="line">    response_post = requests.get(url = PostUrl, headers = WebHead)</span><br><span class="line">    soup_post = BeautifulSoup(response_post.text, <span class="string">'html.parser'</span>)</span><br><span class="line">    img_url_list = soup_post.find_all(<span class="string">'img'</span>, class_ = <span class="string">'BDE_Image'</span>)</span><br><span class="line"></span><br><span class="line">    ImgUrl_list = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> img_url_list:</span><br><span class="line">        ImgUrl_list.append(url[<span class="string">'src'</span>])</span><br><span class="line"></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> ImgUrl <span class="keyword">in</span> ImgUrl_list:</span><br><span class="line">        print(<span class="string">"正在保存: "</span> + ImgUrl)</span><br><span class="line">        img_save = requests.get(ImgUrl, headers = WebHead)</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"第"</span> + str(i) + <span class="string">"个帖子"</span> + <span class="string">"第"</span> + str(j) + <span class="string">"张图片"</span> +<span class="string">'.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(img_save.content)</span><br><span class="line">        f.close()</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    j += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>自此，所有代码都写完了。运行以上代码的前提是需要安装好第三方模块以及E盘有一个文件夹“贴吧精品壁纸”。一个很简单的爬虫就这样子完成了，它会爬WebUrl界面所有帖子里面的所有图片资源，当然，速度并不是很快，完全可以多加优化。运行完不出意外应该有一千多张图片，中途理论上是不会中断的。具体的效果如图：<br><img src="https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/blog/QQ%E6%88%AA%E5%9B%BE20190407190404.png" alt="test"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>感觉很有趣，看着自己写的代码成功的把图片一张张扒下来感觉很有成就感。虽然只是一个很简单的项目，还是让我感觉对python更加理解了一些，相比于阅读枯燥的官方文档，我更喜欢参考别人的项目代码来学习各种模块方法的使用。python大概就告一段落了，爬虫这块会继续学习下去，但是系统的学习python恐怕是没有必要了，我平时刷题都是用C/C++，python给我的帮助真的不是很大，只是玩一玩还好啦。人生苦短，我用python！加油。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;网络爬虫&lt;/a&gt;（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。&lt;/p&gt;
&lt;p&gt;如今Python这门语言越来越火，在外面看到的培训机构都有“Python爬虫”、“Python人工智能”这种招牌。而我们学校没有开设Python这一门课程，因此我学习Python仅仅是个人兴趣，也算是为以后的工作做一点点的准备吧。由于在此之前我都是用C/C++来做题目的，所以我对于Python的类与对象方面都不是很了解，我大概看了一下文档，有各种各样的由官方封装起来的方法供我们使用，还有很多第三方模块，总的来说对Python的第一印象是语法简单，涉及内容多。同时Python也是我学习的第一门面向对象的语言。希望自己能够好好体会&lt;code&gt;对象&lt;/code&gt;的概念。&lt;/p&gt;
    
    </summary>
    
      <category term="Python学习" scheme="https://blog.iplua.com/categories/Python%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="https://blog.iplua.com/tags/python/"/>
    
      <category term="爬虫" scheme="https://blog.iplua.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Sudoku Killer</title>
    <link href="https://blog.iplua.com/Sudoku-Killer/"/>
    <id>https://blog.iplua.com/Sudoku-Killer/</id>
    <published>2019-04-06T01:48:02.000Z</published>
    <updated>2019-05-26T05:54:47.131Z</updated>
    
    <content type="html"><![CDATA[<p>据说，在2008北京奥运会上，会将数独列为一个单独的项目进行比赛，冠军将有可能获得的一份巨大的奖品：HDU免费七日游外加lcy亲笔签名以及同hdu acm team合影留念的机会。</p><p>所以全球人民前仆后继，为了奖品日夜训练茶饭不思。当然也包括初学者linle，不过他太笨了又没有多少耐性，只能做做最最基本的数独题，不过他还是想得到那些奖品，你能帮帮他吗？你只要把答案告诉他就可以，不用教他是怎么做的。</p><p>数独游戏的规则是这样的：在一个9x9的方格中，你需要把数字1-9填写到空格当中，并且使方格的每一行和每一列中都包含1-9这九个数字。同时还要保证，空格中用粗线划分成9个3x3的方格也同时包含1-9这九个数字。比如有这样一个题，大家可以仔细观察一下，在这里面每行、每列，以及每个3x3的方格都包含1-9这九个数字。</p><a id="more"></a><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>本题包含多组测试，每组之间由一个空行隔开。每组测试会给你一个 9*9 的矩阵，同一行相邻的两个元素用一个空格分开。其中1-9代表该位置的已经填好的数，问号（?）表示需要你填的数。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每组测试，请输出它的解，同一行相邻的两个数用一个空格分开。两组解之间要一个空行。对于每组测试数据保证它有且只有一个解。</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><pre><code>7  1  2  ?  6  ?  3  5  8?  6  5  2  ?  7  1  ?  4?  ?  8  5  1  3  6  7  29  2  4  ?  5  6  ?  3  75  ?  6  ?  ?  ?  2  4  11  ?  3  7  2  ?  9  ?  5?  ?  1  9  7  5  4  8  66  ?  7  8  3  ?  5  1  98  5  9  ?  4  ?  ?  2  3</code></pre><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><pre><code>7  1  2  4  6  9  3  5  83  6  5  2  8  7  1  9  44  9  8  5  1  3  6  7  29  2  4  1  5  6  8  3  75  7  6  3  9  8  2  4  11  8  3  7  2  4  9  6  52  3  1  9  7  5  4  8  66  4  7  8  3  2  5  1  98  5  9  6  4  1  7  2  3</code></pre><h4 id="题目题解"><a href="#题目题解" class="headerlink" title="题目题解"></a>题目题解</h4><p>数独的基本规则是只能填<code>1 - 9</code>这九个数字。且<code>行、列、九方格</code>都不能有相同的数字。<br>在输入数据时找到<code>?</code>的位置并用数组保存起来。比如<code>vis[0][0]</code>便是代表第一个<code>?</code>号的横坐标，而<code>vis[0][1]</code>则是代表第一个<code>?</code>的纵坐标，之后要做的就是把所有的<code>?</code>号填完。</p><blockquote><p>在判断的过程注意一下找到对应<code>?</code>的九方格起始位置<br>注意输出格式，两组解中间都需要换行</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">10</span>][<span class="number">10</span>], vis[<span class="number">85</span>][<span class="number">5</span>], cnt;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>[i][vis[n][<span class="number">1</span>]] == k || <span class="built_in">map</span>[vis[n][<span class="number">0</span>]][i] == k)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x = vis[n][<span class="number">0</span>] / <span class="number">3</span> * <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> y = vis[n][<span class="number">1</span>] / <span class="number">3</span> * <span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt; x + <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = y; j &lt; y + <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == k)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="literal">true</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (n == cnt) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">8</span>) </span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">map</span>[i][j] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">map</span>[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">9</span>; k++) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = vis[n][<span class="number">0</span>], j = vis[n][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (check(k, n) == <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="built_in">map</span>[i][j] = k;</span><br><span class="line">            dfs(n + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">map</span>[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; c) &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (c == <span class="string">'?'</span>) &#123;</span><br><span class="line">                    <span class="built_in">map</span>[i][j] = <span class="number">0</span>;</span><br><span class="line">                    vis[cnt][<span class="number">0</span>] = i;</span><br><span class="line">                    vis[cnt ++][<span class="number">1</span>] = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">map</span>[i][j] = c - <span class="string">'0'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line">                    <span class="keyword">if</span> (c == <span class="string">'?'</span>) &#123;</span><br><span class="line">                    <span class="built_in">map</span>[i][j] = <span class="number">0</span>;</span><br><span class="line">                    vis[cnt][<span class="number">0</span>] = i;</span><br><span class="line">                    vis[cnt ++][<span class="number">1</span>] = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">map</span>[i][j] = c - <span class="string">'0'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出格式要求</span></span><br><span class="line">        <span class="keyword">if</span> (f ++)   <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        dfs(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;据说，在2008北京奥运会上，会将数独列为一个单独的项目进行比赛，冠军将有可能获得的一份巨大的奖品：HDU免费七日游外加lcy亲笔签名以及同hdu acm team合影留念的机会。&lt;/p&gt;
&lt;p&gt;所以全球人民前仆后继，为了奖品日夜训练茶饭不思。当然也包括初学者linle，不过他太笨了又没有多少耐性，只能做做最最基本的数独题，不过他还是想得到那些奖品，你能帮帮他吗？你只要把答案告诉他就可以，不用教他是怎么做的。&lt;/p&gt;
&lt;p&gt;数独游戏的规则是这样的：在一个9x9的方格中，你需要把数字1-9填写到空格当中，并且使方格的每一行和每一列中都包含1-9这九个数字。同时还要保证，空格中用粗线划分成9个3x3的方格也同时包含1-9这九个数字。比如有这样一个题，大家可以仔细观察一下，在这里面每行、每列，以及每个3x3的方格都包含1-9这九个数字。&lt;/p&gt;
    
    </summary>
    
      <category term="算法学习" scheme="https://blog.iplua.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://blog.iplua.com/tags/C/"/>
    
      <category term="DFS" scheme="https://blog.iplua.com/tags/DFS/"/>
    
      <category term="HDU" scheme="https://blog.iplua.com/tags/HDU/"/>
    
  </entry>
  
  <entry>
    <title>提问的智慧</title>
    <link href="https://blog.iplua.com/How-To-Ask-Questions/"/>
    <id>https://blog.iplua.com/How-To-Ask-Questions/</id>
    <published>2019-04-05T10:25:34.000Z</published>
    <updated>2019-05-26T05:43:46.857Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文网址：<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md" target="_blank" rel="noopener">How-To-Ask-Questions-The-Smart-Way</a></p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在<a href="http://www.catb.org/~esr/faqs/hacker-howto.html" target="_blank" rel="noopener">黑客</a>的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。</p><p>不只是黑客，现在开源（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件<strong>好事</strong>；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。</p><p>首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，”好问题！”是诚挚的大力称赞。</p><p>尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。</p><p>我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 <code>失败者（撸瑟）</code> （由于历史原因，我们有时把它拼作 <code>lusers</code>）。</p><p>我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。</p><p>我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答<code>赢家（winner）</code>的问题。</p><p>如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。</p><p>所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 – 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。</p><p>如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 – 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。</p><a id="more"></a><h2 id="在提问之前"><a href="#在提问之前" class="headerlink" title="在提问之前"></a>在提问之前</h2><p>在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：</p><ol><li>尝试在你准备提问的论坛的旧文章中搜索答案。</li><li>尝试上网搜索以找到答案。</li><li>尝试阅读手册以找到答案。</li><li>尝试阅读常见问题文件（FAQ）以找到答案。</li><li>尝试自己检查或试验以找到答案。</li><li>向你身边的强者朋友打听以找到答案。</li><li>如果你是程序开发者，请尝试阅读源代码以找到答案。</li></ol><p>当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所<strong>学到</strong>的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。</p><p>运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（既搜索 <a href="http://groups.google.com/" target="_blank" rel="noopener">Google 论坛</a>，也搜索网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 <code>我在 Google 中搜过下列句子但没有找到什么有用的东西</code> 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。</p><p>别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。</p><p>准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。</p><p>小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着<code>蠢问题…</code>， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。</p><p>绝不要自以为<strong>够格</strong>得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去<strong>挣到</strong>一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。</p><p>另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。<code>谁能给点提示？</code>、<code>我的这个例子里缺了什么？</code>以及<code>我应该检查什么地方</code>比<code>请把我需要的确切的过程贴出来</code>更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。</p><h2 id="当你提问时"><a href="#当你提问时" class="headerlink" title="当你提问时"></a>当你提问时</h2><h3 id="慎选提问的论坛"><a href="#慎选提问的论坛" class="headerlink" title="慎选提问的论坛"></a>慎选提问的论坛</h3><p>小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：</p><ul><li>在与主题不合的论坛上贴出你的问题。</li><li>在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。</li><li>在太多的不同新闻群组上重复转贴同样的问题（cross-post）。</li><li>向既非熟人也没有义务解决你问题的人发送私人电邮。</li></ul><p>黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。</p><p>因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括<strong>阅读</strong> FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去看看。</p><p>向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 – 如果你不确定，那就向别处发送，或者压根别发。</p><p>在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。</p><p>别像机关枪似的一次”扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。</p><p>搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。</p><p>一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。</p><p>可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 —— 已经好几次了，一些热门软件的作者从自己软件的支持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。</p><h3 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h3><p>搜索，<strong>然后</strong> 在 Stack Exchange 问。</p><p>近年来，Stack Exchange community 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。</p><p>因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。</p><p>Stack Exchange 已经成长到<a href="http://stackexchange.com/sites" target="_blank" rel="noopener">超过一百个网站</a>，以下是最常用的几个站：</p><ul><li>Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。</li><li>Stack Overflow 是问写程序有关的问题。</li><li>Server Fault 是问服务器和网管相关的问题。</li></ul><h3 id="网站和-IRC-论坛"><a href="#网站和-IRC-论坛" class="headerlink" title="网站和 IRC 论坛"></a>网站和 IRC 论坛</h3><p>本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。</p><p>事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 “用<strong>我们的</strong>版本”。</p><p>在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。</p><p>通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。</p><p>在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。</p><h3 id="第二步，使用项目邮件列表"><a href="#第二步，使用项目邮件列表" class="headerlink" title="第二步，使用项目邮件列表"></a>第二步，使用项目邮件列表</h3><p>当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法：</p><ul><li>任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。</li><li>向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。</li><li>大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。</li><li>如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。</li></ul><p>如果一个项目既有”使用者” 也有”开发者”（或”黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向”使用者”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。</p><p>然而，如果你<strong>确信</strong>你的问题很特别，而且在”使用者” 列表或论坛中几天都没有回复，可以试试前往”开发者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意）</p><p>如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。</p><h3 id="使用有意义且描述明确的标题"><a href="#使用有意义且描述明确的标题" class="headerlink" title="使用有意义且描述明确的标题"></a>使用有意义且描述明确的标题</h3><p>在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的<code>帮帮忙</code>、<code>跪求</code>、<code>急</code>（更别说<code>救命啊！！！！</code>这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。</p><p>一个好标题范例是<code>目标 —— 差异</code>式的描述，许多技术支持组织就是这样做的。在<code>目标</code>部分指出是哪一个或哪一组东西有问题，在<code>差异</code>部分则描述与期望的行为不一致的地方。</p><blockquote><p>蠢问题：救命啊！我的笔记本电脑不能正常显示了！</p></blockquote><blockquote><p>聪明问题：X.org 6.8.1 的鼠标光标会变形，某牌显卡 MV1005 芯片组。</p></blockquote><blockquote><p>更聪明问题：X.org 6.8.1 的鼠标光标，在某牌显卡 MV1005 芯片组环境下 - 会变形。</p></blockquote><p>编写<code>目标 —— 差异</code> 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标光标或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境<strong>和</strong>你遇到的问题。</p><p>总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。</p><p>如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 <code>Re: 测试</code> 或者 <code>Re: 新 bug</code> 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。</p><p>对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。</p><p>仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。</p><p>在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你<strong>只想</strong>在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。</p><h3 id="使问题容易回复"><a href="#使问题容易回复" class="headerlink" title="使问题容易回复"></a>使问题容易回复</h3><p>以<code>请将你的回复发送到……</code>来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，<a href="http://linuxmafia.com/faq/Mail/muas.html" target="_blank" rel="noopener">换个好点的</a>；如果是操作系统不支持这种邮件程序，也换个好点的。</p><p>在论坛，要求通过电子邮件回复是非常无礼的，除非你认为回复的信息可能比较敏感（有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如<code>追踪此讨论串</code>、<code>有回复时发送邮件提醒</code>等功能。</p><h3 id="用清晰、正确、精准并语法正确的语句"><a href="#用清晰、正确、精准并语法正确的语句" class="headerlink" title="用清晰、正确、精准并语法正确的语句"></a>用清晰、正确、精准并语法正确的语句</h3><p>我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。</p><p>正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 —— 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它<strong>必须很</strong>准确，而且有迹象表明你是在思考和关注问题。</p><p>正确地拼写、使用标点和大小写，不要将<code>its</code>混淆为<code>it&#39;s</code>，<code>loose</code>搞成<code>lose</code>或者将<code>discrete</code>弄成<code>discreet</code>。不要<strong>全部用大写</strong>，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。<a href="http://en.wikipedia.org/wiki/Alan_Cox" target="_blank" rel="noopener">Alan Cox</a> 也许可以这样做，但你不行）。</p><p>更白话的说，如果你写得像是个半文盲[译注：<a href="http://zh.wikipedia.org/wiki/小白" target="_blank" rel="noopener">小白</a>]，那多半得不到理睬。也不要使用即时通信中的简写或<a href="http://zh.wikipedia.org/wiki/火星文" target="_blank" rel="noopener">火星文</a>，如将<code>的</code>简化为<code>d</code>会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p><p>如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。</p><p>如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：<br>[译注：以下附上原文以供使用]</p><blockquote><p>English is not my native language; please excuse typing errors.</p></blockquote><ul><li>英文不是我的母语，请原谅我的错字或语法。</li></ul><blockquote><p>If you speak $LANGUAGE, please email/PM me;<br>I may need assistance translating my question.</p></blockquote><ul><li>如果你说<strong>某语言</strong>，请寄信/私讯给我；我需要有人协助我翻译我的问题。</li></ul><blockquote><p>I am familiar with the technical terms,<br>but some slang expressions and idioms are difficult for me.</p></blockquote><ul><li>我对技术名词很熟悉，但对于俗语或是特别用法比较不甚了解。</li></ul><blockquote><p>I’ve posted my question in $LANGUAGE and English.<br>I’ll be glad to translate responses, if you only use one or the other.</p></blockquote><ul><li>我把我的问题用<strong>某语言</strong>和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。</li></ul><h3 id="使用易于读取且标准的文件格式发送问题"><a href="#使用易于读取且标准的文件格式发送问题" class="headerlink" title="使用易于读取且标准的文件格式发送问题"></a>使用易于读取且标准的文件格式发送问题</h3><p>如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：</p><ul><li>使用纯文字而不是 HTML (<a href="http://archive.birdhouse.org/etc/evilmail.html" target="_blank" rel="noopener">关闭 HTML</a> 并不难）。</li><li>使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。</li><li>不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。</li><li>但是，对一些特殊的文件<strong>不要</strong>设置固定宽度（譬如日志档案拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。</li><li>在英语论坛中，不要使用<code>Quoted-Printable</code> MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的<code>=20</code>符号既难看也分散注意力，甚至有可能破坏内容的语意。</li><li>绝对，<strong>永远</strong>不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。</li><li>如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的<code>智能引号</code>功能 （从[选项] &gt; [校订] &gt; [自动校正选项]，勾选掉<code>智能引号</code>单选框），以免在你的邮件中到处散布垃圾字符。</li><li>在论坛，勿滥用<code>表情符号</code>和<code>HTML</code>功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。</li></ul><p>如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的<code>查看源代码</code>命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。</p><h3 id="精确地描述问题并言之有物"><a href="#精确地描述问题并言之有物" class="headerlink" title="精确地描述问题并言之有物"></a>精确地描述问题并言之有物</h3><ul><li>仔细、清楚地描述你的问题或 Bug 的症状。</li><li>描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：<code>Fedora Core 4</code>、<code>Slackware 9.1</code>等）。</li><li>描述在提问前你是怎样去研究和理解这个问题的。</li><li>描述在提问前为确定问题而采取的诊断步骤。</li><li>描述最近做过什么可能相关的硬件或软件变更。</li><li>尽可能的提供一个可以<code>重现这个问题的可控环境</code>的方法。</li></ul><p>尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能遇到的问题回答一遍。</p><p>以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。</p><p><a href="http://www.chiark.greenend.org.uk/~sgtatham/" target="_blank" rel="noopener">Simon Tatham</a> 写过一篇名为《<a href="http://www.chiark.greenend.org.uk/~sgtatham/bugs-cn.html" target="_blank" rel="noopener">如何有效的报告 Bug</a>》的出色文章。强力推荐你也读一读。</p><h3 id="话不在多而在精"><a href="#话不在多而在精" class="headerlink" title="话不在多而在精"></a>话不在多而在精</h3><p>你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。</p><p>这样做的用处至少有三点。<br>第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；<br>第二，简化问题使你更有可能得到<strong>有用</strong>的答案；<br>第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。</p><h3 id="别动辄声称找到-Bug"><a href="#别动辄声称找到-Bug" class="headerlink" title="别动辄声称找到 Bug"></a>别动辄声称找到 Bug</h3><p>当你在使用软件中遇到问题，除非你非常、<strong>非常</strong>的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的<code>Bug</code>，你应该能提供相应位置的修正或替代文件。</p><p>请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前<a href="#在提问之前">已经做了这些，是吧</a>？）。这也意味着很有可能是你弄错了而不是软件本身有问题。</p><p>编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有<code>Bug</code>时，这尤其严重。</p><p>提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是<strong>你</strong>做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。</p><h3 id="低声下气不能代替你的功课"><a href="#低声下气不能代替你的功课" class="headerlink" title="低声下气不能代替你的功课"></a>低声下气不能代替你的功课</h3><p>有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 —— 低声下气：<code>我知道我只是个可悲的新手，一个撸瑟，但...</code>。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。</p><p>别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。</p><p>有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。</p><h3 id="描述问题症状而非你的猜测"><a href="#描述问题症状而非你的猜测" class="headerlink" title="描述问题症状而非你的猜测"></a>描述问题症状而非你的猜测</h3><p>告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。</p><p><strong>蠢问题</strong></p><blockquote><p>我在编译内核时接连遇到 SIG11 错误，<br>我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？</p></blockquote><p><strong>聪明问题</strong></p><blockquote><p>我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2 芯片组），<br>256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，<br>但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。<br>所有内存都换过了，没有效果。相关部分的标准编译记录如下…。</p></blockquote><p>由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：<code>所有的诊断专家都来自密苏里州。</code> 美国国务院的官方座右铭则是：<code>让我看看</code>（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：<code>我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。</code>） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！</p><h3 id="按发生时间先后列出问题症状"><a href="#按发生时间先后列出问题症状" class="headerlink" title="按发生时间先后列出问题症状"></a>按发生时间先后列出问题症状</h3><p>问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。</p><p>如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，<code>多</code>不等于<code>好</code>。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。</p><p>如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。</p><h3 id="描述目标而不是过程"><a href="#描述目标而不是过程" class="headerlink" title="描述目标而不是过程"></a>描述目标而不是过程</h3><p>如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。</p><p>经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。</p><p><strong>蠢问题</strong></p><blockquote><p>我怎样才能从某绘图程序的颜色选择器中取得十六进制的的 RGB 值？</p></blockquote><p><strong>聪明问题</strong></p><blockquote><p>我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot），<br>但却无法从某绘图程序的颜色选择器取得十六进制的的 RGB 值。</p></blockquote><p>第二种提问法比较聪明，你可能得到像是<code>建议采用另一个更合适的工具</code>的回复。</p><h3 id="别要求使用私人电邮回复"><a href="#别要求使用私人电邮回复" class="headerlink" title="别要求使用私人电邮回复"></a>别要求使用私人电邮回复</h3><p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。</p><p>当你要求私下回复时，这个过程和奖励都被中止。别这样做，让<strong>回复者</strong>来决定是否私下回答 —— 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。</p><p>这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是<code>向我发电邮，我将为论坛归纳这些回复</code>。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 —— 但你必须信守诺言。</p><h3 id="清楚明确的表达你的问题以及需求"><a href="#清楚明确的表达你的问题以及需求" class="headerlink" title="清楚明确的表达你的问题以及需求"></a>清楚明确的表达你的问题以及需求</h3><p>漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。</p><p>如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。</p><p>要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。</p><p>所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问<code>我想更好的理解 X，可否指点一下哪有好一点说明？</code>通常比问<code>你能解释一下 X 吗？</code>更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。</p><h3 id="询问有关代码的问题时"><a href="#询问有关代码的问题时" class="headerlink" title="询问有关代码的问题时"></a>询问有关代码的问题时</h3><p>别要求他人帮你调试有问题的代码，不提示一下应该从何入手。张贴几百行的代码，然后说一声：<code>它不能工作</code>会让你完全被忽略。只贴几十行代码，然后说一句：<code>在第七行以后，我期待它显示 &lt;x&gt;，但实际出现的是 &lt;y&gt;</code>比较有可能让你得到回应。</p><p>最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能<strong>刚好</strong>展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译/直译/被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看<a href="#话不在多而在精">话不在多而在精</a>一节）。</p><p>一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —— 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。</p><p>如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p><h3 id="别把自己家庭作业的问题贴上来"><a href="#别把自己家庭作业的问题贴上来" class="headerlink" title="别把自己家庭作业的问题贴上来"></a>别把自己家庭作业的问题贴上来</h3><p>黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由<strong>你</strong>来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</p><p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在使用者群组，论坛或（最后一招）在项目的<strong>使用者</strong>邮件列表或论坛中提问。尽管黑客们<strong>会</strong>看出来，但一些有经验的使用者也许仍会给你一些提示。</p><h3 id="去掉无意义的提问句"><a href="#去掉无意义的提问句" class="headerlink" title="去掉无意义的提问句"></a>去掉无意义的提问句</h3><p>避免用无意义的话结束提问，例如<code>有人能帮我吗？</code>或者<code>这有答案吗？</code>。</p><p>首先：如果你对问题的描述不是很好，这样问更是画蛇添足。</p><p>其次：由于这样问是画蛇添足，黑客们会很厌烦你 —— 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：<code>没错，有人能帮你</code>或者<code>不，没答案</code>。</p><p>一般来说，避免用 <code>是或否</code>、<code>对或错</code>、<code>有或没有</code>类型的问句，除非你想得到<a href="http://homepage.ntlworld.com./jonathan.deboynepollard/FGA/questions-with-yes-or-no-answers.html" target="_blank" rel="noopener">是或否类型的回答</a>。</p><h3 id="即使你很急也不要在标题写紧急"><a href="#即使你很急也不要在标题写紧急" class="headerlink" title="即使你很急也不要在标题写紧急"></a>即使你很急也不要在标题写<code>紧急</code></h3><p>这是你的问题，不是我们的。宣称<code>紧急</code>极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，<code>紧急</code>这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 —— 你希望能看到你问题的人可能永远也看不到。</p><p>有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。</p><p>当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如<code>紧急：帮我救救这个毛绒绒的小海豹！</code>肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒绒的小海豹很重要。</p><p>如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。</p><h3 id="礼多人不怪，而且有时还很有帮助"><a href="#礼多人不怪，而且有时还很有帮助" class="headerlink" title="礼多人不怪，而且有时还很有帮助"></a>礼多人不怪，而且有时还很有帮助</h3><p>彬彬有礼，多用<code>请</code>和<code>谢谢您的关注</code>，或<code>谢谢你的关照</code>。让大家都知道你对他们花时间免费提供帮助心存感激。</p><p>坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的）</p><p>然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。</p><p>（我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得<code>先谢了</code>意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说<code>先谢了</code>，<strong>然后</strong>事后再对回复者表示感谢，或者换种方式表达感激，譬如用<code>谢谢你的关注</code>或<code>谢谢你的关照</code>。）</p><h3 id="问题解决后，加个简短的补充说明"><a href="#问题解决后，加个简短的补充说明" class="headerlink" title="问题解决后，加个简短的补充说明"></a>问题解决后，加个简短的补充说明</h3><p>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。</p><p>最理想的方式是向最初提问的话题回复此消息，并在标题中包含<code>已修正</code>，<code>已解决</code>或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串<code>问题 X</code>和<code>问题 X - 已解决</code>的潜在回复者就明白不用再浪费时间了（除非他个人觉得<code>问题 X</code>的有趣），因此可以利用此时间去解决其它问题。</p><p>补充说明不必很长或是很深入；简单的一句<code>你好，原来是网线出了问题！谢谢大家 – Bill</code>比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。</p><p>对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此<strong>之后</strong>才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。</p><p>除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。</p><p>至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。</p><p>思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。</p><p>在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。</p><h2 id="如何解读答案"><a href="#如何解读答案" class="headerlink" title="如何解读答案"></a>如何解读答案</h2><p><a id="RTFM"></a></p><h3 id="RTFM-和-STFW：如何知道你已完全搞砸了"><a href="#RTFM-和-STFW：如何知道你已完全搞砸了" class="headerlink" title="RTFM 和 STFW：如何知道你已完全搞砸了"></a>RTFM 和 STFW：如何知道你已完全搞砸了</h3><p>有一个古老而神圣的传统：如果你收到<code>RTFM （Read The Fucking Manual）</code>的回应，回答者认为你<strong>应该去读他妈的手册</strong>。当然，基本上他是对的，你应该去读一读。</p><p>RTFM 有一个年轻的亲戚。如果你收到<code>STFW（Search The Fucking Web）</code>的回应，回答者认为你<strong>应该到他妈的网上搜索</strong>。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 <strong><a href="http://lmgtfy.com/" target="_blank" rel="noopener">Google 是你的朋友</a></strong>！）</p><p>在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。</p><p>通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为</p><ul><li><strong>你需要的信息非常容易获得</strong>；</li><li><strong>你自己去搜索这些信息比灌给你，能让你学到更多</strong>。</li></ul><p>你不应该因此不爽；<strong>依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见</strong>。你应该对他祖母般的慈祥表示感谢。</p><h3 id="如果还是搞不懂"><a href="#如果还是搞不懂" class="headerlink" title="如果还是搞不懂"></a>如果还是搞不懂</h3><p>如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。</p><p>比方说，如果我回答你：<code>看来似乎是 zentry 卡住了；你应该先清除它。</code>，然后，这是一个<strong>很糟的</strong>后续问题回应：<code>zentry 是什么？</code> <strong>好</strong>的问法应该是这样：<code>哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？</code></p><h3 id="处理无礼的回应"><a href="#处理无礼的回应" class="headerlink" title="处理无礼的回应"></a>处理无礼的回应</h3><p>很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。</p><p>如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这<strong>没有</strong>发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而<strong>你</strong>将被视为有错的一方，这将伤害到你获取信息或帮助的机会。</p><p>另一方面，你偶尔真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。</p><p>（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会<strong>正常</strong>交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们<strong>喜欢</strong>我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑）。</p><p>Jeff Bigler 的观察总结和这个相关也值得一读 (<strong><a href="http://www.mit.edu/~jcb/tact.html" target="_blank" rel="noopener">tact filters</a></strong>)。</p><p>在下一节，我们会谈到另一个问题，当<strong>你</strong>行为不当时所会受到的<code>冒犯</code>。</p><h2 id="如何避免扮演失败者"><a href="#如何避免扮演失败者" class="headerlink" title="如何避免扮演失败者"></a>如何避免扮演失败者</h2><p>在黑客社区的论坛中有那么几次你可能会搞砸 —— 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。</p><p>这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做：</p><p>熬过去，这很正常。事实上，它是有益健康且合理的。</p><p>社区的标准不会自行维持，它们是通过参与者积极而<strong>公开地</strong>执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。</p><p>也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称<code>如果你不想帮助用户就闭嘴。</code> 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。</p><p>夸张的讲法是：你要的是“友善”（以上述方式）还是有用？两个里面挑一个。</p><p>记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心<strong>你</strong>和<strong>他的社区</strong>而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。</p><p>有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是<strong>真的</strong>会把问题搞砸。</p><p>这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。</p><p>也别让自己卷入口水战，最好不要理睬大多数的口水战 – 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。</p><h2 id="不该问的问题"><a href="#不该问的问题" class="headerlink" title="不该问的问题"></a>不该问的问题</h2><p>以下是几个经典蠢问题，以及黑客没回答时心中所想的：</p><p>问题：<a href="#q1">我能在哪找到 X 程序或 X 资源？</a></p><p>问题：<a href="#q2">我怎样用 X 做 Y？</a></p><p>问题：<a href="#q3">如何设定我的 shell 提示？</a></p><p>问题：<a href="#q4">我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</a></p><p>问题：<a href="#q5">我的程序/设定/SQL 语句没有用</a></p><p>问题：<a href="#q6">我的 Windows 电脑有问题，你能帮我吗？</a></p><p>问题：<a href="#q7">我的程序不会动了，我认为系统工具 X 有问题</a></p><p>问题：<a href="#q8">我在安装 Linux（或者 X ）时有问题，你能帮我吗？</a></p><p>问题：<a href="#q9">我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？</a></p><hr><p><a id="q1"></a></p><blockquote><p>问题：我能在哪找到 X 程序或 X 资源？</p></blockquote><p>回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 <a href="http://www.google.com" target="_blank" rel="noopener">Google</a> 吗？</p><p><a id="q2"></a></p><blockquote><p>问题：我怎样用 X 做 Y？</p></blockquote><p>回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。</p><p><a id="q3"></a></p><blockquote><p>问题：如何设定我的 shell 提示？？</p></blockquote><p>回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 <a href="#RTFM">RTFM</a>，然后自己去找出来。</p><p><a id="q4"></a></p><blockquote><p>问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</p></blockquote><p>回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。</p><p><a id="q5"></a></p><blockquote><p>问题：我的{程序/设定/SQL 语句}不工作</p></blockquote><p>回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种</p><ul><li>你还有什么要补充的吗？</li><li>真糟糕，希望你能搞定。</li><li>这关我有什么屁事？</li></ul><p><a id="q6"></a></p><blockquote><p>问题：我的 Windows 电脑有问题，你能帮我吗？</p></blockquote><p>回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开源操作系统吧。</p><p>注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你<strong>可以</strong>问与 Windows 相关的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。</p><p><a id="q7"></a></p><blockquote><p>问题：我的程序不会动了，我认为系统工具 X 有问题</p></blockquote><p>回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。</p><p><a id="q8"></a></p><blockquote><p>问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？</p></blockquote><p>回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在<a href="http://www.linux.org/groups/index.html" target="_blank" rel="noopener">这儿</a>找到使用者群组的清单）。</p><p>注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 <code>Linux</code> 和<strong>所有</strong>被怀疑的硬件作关键词仔细搜索。</p><p><a id="q9"></a></p><blockquote><p>问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？</p></blockquote><p>回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！</p><h2 id="好问题与蠢问题"><a href="#好问题与蠢问题" class="headerlink" title="好问题与蠢问题"></a>好问题与蠢问题</h2><p>最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。</p><p><strong>蠢问题</strong>：</p><blockquote><p>我可以在哪儿找到关于 Foonly Flurbamatic 的资料？</p></blockquote><p>这种问法无非想得到 <a href="#RTFM">STFW</a> 这样的回答。</p><p><strong>聪明问题</strong>：</p><blockquote><p>我用 Google 搜索过 “Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？</p></blockquote><p>这个问题已经 STFW 过了，看起来他真的遇到了麻烦。</p><p><strong>蠢问题</strong>：</p><blockquote><p>我从 foo 项目找来的源码没法编译。它怎么这么烂？</p></blockquote><p>他觉得都是别人的错，这个傲慢自大的提问者。</p><p><strong>聪明问题</strong>：</p><blockquote><p>foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？</p></blockquote><p>提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。</p><p><strong>蠢问题</strong>：</p><blockquote><p>我的主机板有问题了，谁来帮我？</p></blockquote><p>某黑客对这类问题的回答通常是：<code>好的，还要帮你拍拍背和换尿布吗？</code>，然后按下删除键。</p><p><strong>聪明问题</strong>：</p><blockquote><p>我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？</p></blockquote><p>这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。</p><p>在最后一个问题中，注意<code>告诉我答案</code>和<code>给我启示，指出我还应该做什么诊断工作</code>之间微妙而又重要的区别。</p><p>事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。</p><p>通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。</p><p>事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候， 一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的<strong>名</strong>人，而是因为我用了正确的方式来提问。</p><p>黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我<strong>像</strong>个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。</p><h2 id="如果得不到回答"><a href="#如果得不到回答" class="headerlink" title="如果得不到回答"></a>如果得不到回答</h2><p>如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。</p><p>总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。</p><p>你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。</p><p>有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。</p><p>另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。</p><p>对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开源软件的要高得多，且内容也没那么丰富）。</p><h2 id="如何更好地回答问题"><a href="#如何更好地回答问题" class="headerlink" title="如何更好地回答问题"></a>如何更好地回答问题</h2><p><strong>态度和善一点</strong>。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p><p><strong>对初犯者私下回复</strong>。对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。</p><p><strong>如果你不确定，一定要说出来</strong>！一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p><p><strong>如果帮不了忙，也别妨碍他</strong>。不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 —— 有些可怜的呆瓜会把它当成真的指令。</p><p><strong>试探性的反问以引出更多的细节</strong>。如果你做得好，提问者可以学到点东西 —— 你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。</p><p>尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词）会更好。</p><p><strong>如果你决定回答，就请给出好的答案</strong>。当别人正在用错误的工具或方法时别建议笨拙的权宜之计（wordaround），应推荐更好的工具，重新界定问题。</p><p><strong>正面的回答问题</strong>！如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 <code>试试看 A 或是 B</code> 或者 <code>试试 X 、 Y 、 Z 、 A 、 B 、 C</code> 并附上一个链接一点用都没有。</p><p><strong>帮助你的社区从问题中学习</strong>。当回复一个好问题时，问问自己<code>如何修改相关文件或常见问题文件以免再次解答同样的问题？</code>，接着再向文件维护者发一份补丁。</p><p>如果你是在研究一番后才做出的回答，<strong>展现你的技巧而不是直接端出结果</strong>。毕竟<code>授人以鱼不如授人以渔</code>。</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p>如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 <a href="http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/" target="_blank" rel="noopener">Unix 系统和网络基本原理</a>。</p><p>当你发布软件或补丁时，试着按<a href="http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html" target="_blank" rel="noopener">软件发布实践</a>操作。</p><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写<code>如何更好地回答问题</code>这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文网址：&lt;a href=&quot;https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;How-To-Ask-Questions-The-Smart-Way&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;http://www.catb.org/~esr/faqs/hacker-howto.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;黑客&lt;/a&gt;的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。&lt;/p&gt;
&lt;p&gt;不只是黑客，现在开源（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件&lt;strong&gt;好事&lt;/strong&gt;；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。&lt;/p&gt;
&lt;p&gt;首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，”好问题！”是诚挚的大力称赞。&lt;/p&gt;
&lt;p&gt;尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。&lt;/p&gt;
&lt;p&gt;我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 &lt;code&gt;失败者（撸瑟）&lt;/code&gt; （由于历史原因，我们有时把它拼作 &lt;code&gt;lusers&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。&lt;/p&gt;
&lt;p&gt;我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答&lt;code&gt;赢家（winner）&lt;/code&gt;的问题。&lt;/p&gt;
&lt;p&gt;如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。&lt;/p&gt;
&lt;p&gt;所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 – 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。&lt;/p&gt;
&lt;p&gt;如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 – 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。&lt;/p&gt;
    
    </summary>
    
    
      <category term="提问的智慧" scheme="https://blog.iplua.com/tags/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/"/>
    
  </entry>
  
  <entry>
    <title>第十届蓝桥杯C/C++（B组）题解</title>
    <link href="https://blog.iplua.com/lanqiao/"/>
    <id>https://blog.iplua.com/lanqiao/</id>
    <published>2019-03-24T14:07:23.000Z</published>
    <updated>2019-05-26T05:55:10.979Z</updated>
    
    <content type="html"><![CDATA[<p>为推动软件开发技术的发展，促进软件专业技术人才培养，向软件行业输送具有创新能力和实践能力的高端人才，提升高校毕业生的就业竞争力，全面推动行业发展及人才培养进程，工业和信息化部人才交流中心特举办“全国软件专业人才设计与创业大赛”，本赛包括个人赛和团队赛两个比赛项目。</p><p>个人赛设置：<br>1、C/C++程序设计（本科A组、本科B组、高职高专组）<br>2、Java软件开发（本科A组、本科B组、高职高专组）<br>3、嵌入式设计与开发（大学组、研究生组）<br>4、单片机设计与开发（大学组）<br>5、电子设计与开发（大学组）</p><p>团队赛设置：软件创业赛一个科目组别。并且形成了立足行业，结合实际，实战演练，促进就业的特色。</p><a id="more"></a><h3 id="试题A：组队"><a href="#试题A：组队" class="headerlink" title="试题A：组队"></a>试题A：组队</h3><p>作为篮球队教练,你需要从以下名单中选出 1 号位至 5 号位各一名球员,组成球队的首发阵容。<br>每位球员担任 1 号位至 5 号位时的评分如下表所示。请你计算首发阵容 1号位至 5 号位的评分之和最大可能是多少?</p><table><thead><tr><th style="text-align:center">编号</th><th style="text-align:center">1号位</th><th style="text-align:center">2号位</th><th style="text-align:center">3号位</th><th style="text-align:center">4号位</th><th style="text-align:center">5号位</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">97</td><td style="text-align:center">90</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">92</td><td style="text-align:center">85</td><td style="text-align:center">96</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">93</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">80</td><td style="text-align:center">86</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">89</td><td style="text-align:center">83</td><td style="text-align:center">97</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">82</td><td style="text-align:center">86</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">87</td><td style="text-align:center">90</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">0</td><td style="text-align:center">97</td><td style="text-align:center">96</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">89</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">95</td><td style="text-align:center">99</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">96</td><td style="text-align:center">97</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">93</td><td style="text-align:center">98</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">94</td><td style="text-align:center">91</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">0</td><td style="text-align:center">83</td><td style="text-align:center">87</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">98</td><td style="text-align:center">97</td><td style="text-align:center">98</td></tr><tr><td style="text-align:center">16</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">93</td><td style="text-align:center">86</td></tr><tr><td style="text-align:center">17</td><td style="text-align:center">98</td><td style="text-align:center">83</td><td style="text-align:center">99</td><td style="text-align:center">98</td><td style="text-align:center">81</td></tr><tr><td style="text-align:center">18</td><td style="text-align:center">93</td><td style="text-align:center">87</td><td style="text-align:center">92</td><td style="text-align:center">96</td><td style="text-align:center">98</td></tr><tr><td style="text-align:center">19</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">89</td><td style="text-align:center">92</td></tr><tr><td style="text-align:center">20</td><td style="text-align:center">0</td><td style="text-align:center">99</td><td style="text-align:center">96</td><td style="text-align:center">95</td><td style="text-align:center">81</td></tr></tbody></table><blockquote><p>答案是490。没必要写程序来实现，数据比较简单可以心算。注意一个队员不能同时担任两个位置。</p></blockquote><h3 id="试题B：年号字串"><a href="#试题B：年号字串" class="headerlink" title="试题B：年号字串"></a>试题B：年号字串</h3><p>小明用字母 A 对应数字 1，B 对应 2，以此类推，用 Z 对应 26。对于 27以上的数字，小明用两位或更长位的字符串来对应，例如 AA 对应 27，AB 对应 28，AZ 对应 52，LQ 对应 329。<br>请问 2019 对应的字符串是什么?</p><blockquote><p>答案是BYQ。程序实现如下。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="keyword">while</span>(n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> t = n % <span class="number">26</span>;</span><br><span class="line">            <span class="keyword">if</span>(t == <span class="number">0</span>)</span><br><span class="line">                t = <span class="number">26</span>;</span><br><span class="line">            s += <span class="keyword">char</span>(t - <span class="number">1</span> + <span class="string">'A'</span>);</span><br><span class="line">            n = (n - t) / <span class="number">26</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        reverse(s.begin(), s.end());</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="试题C：数列求值"><a href="#试题C：数列求值" class="headerlink" title="试题C：数列求值"></a>试题C：数列求值</h3><p>给定数列 1, 1, 1, 3, 5, 9, 17, …,从第 4 项开始，每项都是前 3 项的和。求第 20190324 项的最后 4 位数字。</p><blockquote><p>答案是4659。代码实现如下。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">1</span>, c = <span class="number">1</span>, d;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            d = (a + b + c) % <span class="number">10000</span>;</span><br><span class="line">            a = b; b = c; c = d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="试题D：数的分解"><a href="#试题D：数的分解" class="headerlink" title="试题D：数的分解"></a>试题D：数的分解</h3><p>把 2019 分解成 3 个各不相同的正整数之和，并且要求每个正整数都不包含数字 2 和 4，一共有多少种不同的分解方法?<br>注意交换3个整数的顺序被视为同一种方法，例如1000+1001+18 和1001+1000+18 被视为同一种。</p><blockquote><p>答案是40785。代码实现如下。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(number)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t = number % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">2</span> || t == <span class="number">4</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        number /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a = <span class="number">1</span>; a &lt; n; a++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> b = a + <span class="number">1</span>; b &lt; n &amp;&amp; b &lt; n - a - b; b++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> c = n - a - b;</span><br><span class="line">                <span class="keyword">if</span>(check(a) &amp;&amp; check(b) &amp;&amp; check(c))</span><br><span class="line">                    ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="试题E：迷宫"><a href="#试题E：迷宫" class="headerlink" title="试题E：迷宫"></a>试题E：迷宫</h3><p>给出一个迷宫的平面图，其中标记为 1 的为障碍，标记为 0 的为可以通行的地方。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">010000</span><br><span class="line">000100</span><br><span class="line">001001</span><br><span class="line">110000</span><br></pre></td></tr></table></figure><p>迷宫的入口为左上角，出口为右下角，在迷宫中，只能从一个位置走到这个它的上、下、左、右四个方向之一。对于上面的迷宫，从入口开始，可以按DRRURRDDDR的顺序通过迷宫，一共 10 步。其中 D、U、L、R 分别表示向下、向上、向左、向右走。</p><p>对于下面这个更复杂的迷宫(30 行 50 列)，请找出一种通过迷宫的方式，其使用的步数最少，在步数最少的前提下，请找出字典序最小的一个作为答案。请注意在字典序中D&lt;L&lt;R&lt;U。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">01010101001011001001010110010110100100001000101010</span><br><span class="line">00001000100000101010010000100000001001100110100101</span><br><span class="line">01111011010010001000001101001011100011000000010000</span><br><span class="line">01000000001010100011010000101000001010101011001011</span><br><span class="line">00011111000000101000010010100010100000101100000000</span><br><span class="line">11001000110101000010101100011010011010101011110111</span><br><span class="line">00011011010101001001001010000001000101001110000000</span><br><span class="line">10100000101000100110101010111110011000010000111010</span><br><span class="line">00111000001010100001100010000001000101001100001001</span><br><span class="line">11000110100001110010001001010101010101010001101000</span><br><span class="line">00010000100100000101001010101110100010101010000101</span><br><span class="line">11100100101001001000010000010101010100100100010100</span><br><span class="line">00000010000000101011001111010001100000101010100011</span><br><span class="line">10101010011100001000011000010110011110110100001000</span><br><span class="line">10101010100001101010100101000010100000111011101001</span><br><span class="line">10000000101100010000101100101101001011100000000100</span><br><span class="line">10101001000000010100100001000100000100011110101001</span><br><span class="line">00101001010101101001010100011010101101110000110101</span><br><span class="line">11001010000100001100000010100101000001000111000010</span><br><span class="line">00001000110000110101101000000100101001001000011101</span><br><span class="line">10100101000101000000001110110010110101101010100001</span><br><span class="line">00101000010000110101010000100010001001000100010101</span><br><span class="line">10100001000110010001000010101001010101011111010010</span><br><span class="line">00000100101000000110010100101001000001000000000010</span><br><span class="line">11010000001001110111001001000011101001011011101000</span><br><span class="line">00000110100010001000100000001000011101000000110011</span><br><span class="line">10101000101000100010001111100010101001010000001000</span><br><span class="line">10000010100101001010110000000100101010001011101000</span><br><span class="line">00111100001000010000000110111000000001000000001011</span><br><span class="line">10000001100111010111010001000110111010101101111000</span><br></pre></td></tr></table></figure><p>走呀走迷宫呀，一走四小时呀。这道题我直接没看就放弃了，我知道这一定要会到bfs，但不幸的是我忘记了bfs的模板了。我在知乎上面看到了一个问题“如何评价第十届蓝桥杯”，里面有个回答是“300块钱买了一张草稿纸和花了四小时走迷宫…”。这道题应该是属于比较复杂的，不过搞清楚思路之后做起来还是没太大压力的。</p><blockquote><p>首先，走迷宫需要求出最短路径，也就是从左上角走到右下角走’1’不走’0’的最短路径，拿出bfs求出所有点到最后一个点的最短路径就好了。我们dist[ｎ][m]数组全部更新完之后就要找按字典序走的路径了，此题知道了从左上角走到右下角的最短路径是186，但是不知道是怎么去走，所以直接用暴力循环四种走法即可。首先从起点开始向下走，如果下面的路可走并且下面的点到最后一个点的最短路径刚好是185，那么就更新初始位置，字符串加入’D’。如果下面的路不可走或者是下面的点到最后一个点的最短路径不是185（所谓185就是前一个点到最后一个点的最短路径减１）那就换一个放向’L’，以此类推。一直到最后更新的点的坐标刚好等于最后一个点，那么此时所得的路径就是按照字典序走的最短路径。此题答案如下。代码如下。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DDDDRRURRRRRRDRRRRDDDLDDRDDDDDDDDDDDDRDRDRRURRUURRDDDDRDRRRRRU</span><br><span class="line">RRRDRRDDDRRRRUURUUUUUUULULLUUUURRRRUULLLUUUULLUUULUURRURRURURR</span><br><span class="line">RDRDRRRRDRDRDDLLLDDRRDDRDDLDDDLLDDLLLDLDDDLDDRRRRRRRRRDDDDDDRR</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> g[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> dist[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> dir[<span class="number">4</span>] = &#123;<span class="string">'D'</span>, <span class="string">'L'</span>, <span class="string">'R'</span>, <span class="string">'U'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建用pair把两个数据合成一个数据的队列</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    <span class="comment">//初始化dist数组</span></span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dist));</span><br><span class="line">    dist[n - <span class="number">1</span>][m - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//将最后一个点放进队列</span></span><br><span class="line">    q.push(&#123;n - <span class="number">1</span>, m - <span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//auto声明变量存储队列的队尾数据</span></span><br><span class="line">        <span class="keyword">auto</span> t = q.front();</span><br><span class="line">        <span class="comment">//弹出队列的队尾</span></span><br><span class="line">        q.pop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//根据字典序赋值x和y</span></span><br><span class="line">            <span class="keyword">int</span> x = t.first + dx[i], y = t.second + dy[i];</span><br><span class="line">            <span class="keyword">if</span>(x &gt;= <span class="number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; m)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(dist[x][y] == <span class="number">-1</span> &amp;&amp; g[x][y] == <span class="string">'0'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//满足以上条件更新dist数组并向队列压入坐标数据</span></span><br><span class="line">                    dist[x][y] = dist[t.first][t.second] + <span class="number">1</span>;</span><br><span class="line">                    q.push(&#123;x, y&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//图的输入</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; g[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用BFS求出所有的点到终点的最短路径</span></span><br><span class="line">        bfs(n, m);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="keyword">while</span>(x != n - <span class="number">1</span> || y != m - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//从起点开始，根据字典序更新位置</span></span><br><span class="line">                <span class="keyword">int</span> nx = x + dx[i], ny = y + dy[i];</span><br><span class="line">                <span class="keyword">if</span>(nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; m &amp;&amp; g[nx][ny] == <span class="string">'0'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                        满足了基础条件之后判断是否存在最短路径</span></span><br><span class="line"><span class="comment">                        比如从0 0到n m的最短路径是186</span></span><br><span class="line"><span class="comment">                        1 0到n m之间存在最短路径185，则证明往下走是可行的。</span></span><br><span class="line"><span class="comment">                        以此类推向左向右向上走。</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                    <span class="keyword">if</span>(dist[x][y] == dist[nx][ny] + <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        x = nx, y = ny;</span><br><span class="line">                        ans += dir[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans.size() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="试题F：特殊数的和"><a href="#试题F：特殊数的和" class="headerlink" title="试题F：特殊数的和"></a>试题F：特殊数的和</h3><p>小明对数位中含有 2、0、1、9 的数字很感兴趣(不包括前导 0)，在 1 到40 中这样的数包括 1、2、9、10 至 32、39 和 40，共 28 个，他们的和是 574。请问，在 1 到 n 中，所有这样的数的和是多少?</p><blockquote><p>此题送分，也就是一般的签到题。代码如下。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(number)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t = number % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">2</span> || t == <span class="number">0</span> || t == <span class="number">1</span> || t == <span class="number">9</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        number /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(check(i))</span><br><span class="line">                ans += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="试题G-完全二叉树的权值"><a href="#试题G-完全二叉树的权值" class="headerlink" title="试题G: 完全二叉树的权值"></a>试题G: 完全二叉树的权值</h3><p>给定一棵包含 N 个节点的完全二叉树，树上每个节点都有一个权值，按从上到下、从左到右的顺序依次是 A1，A2，…到AN，如下图所示:</p><p>现在小明要把相同深度的节点的权值加在一起，他想知道哪个深度的节点权值之和最大？如果有多个深度的权值和同为最大，请你输出其中最小的深度。<br>注:根的深度是 1。</p><blockquote><p>完全二叉树，不一定是满二叉树，权值有负值，另外用int可能会溢出。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1&lt;&lt;31</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> maxv = -inf, maxv_d = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, length  = <span class="number">1</span>, depth = <span class="number">1</span>; i &lt; n; depth++ , length *= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x, j = <span class="number">0</span>; j &lt; length &amp;&amp; i &lt; n; j++, i++) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">                sum += x;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(sum &gt; maxv) &#123;</span><br><span class="line">                maxv = sum;</span><br><span class="line">                maxv_d = depth;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; maxv_d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="试题H-等差数列"><a href="#试题H-等差数列" class="headerlink" title="试题H: 等差数列"></a>试题H: 等差数列</h3><p>数学老师给小明出了一道等差数列求和的题目。但是粗心的小明忘记了一部分的数列，只记得其中 N 个整数。<br>现在给出这 N 个整数，小明想知道包含这 N 个整数的最短的等差数列有几项?</p><blockquote><p>此题重点在于求最小公差。做法是先把数列从小到大排序，然后求出从第二个数到最后一个数与第一个数的差值，显然第二个数与第一个数的差值是最小的并暂时设为公差d，那么从第三个数开始找与公差d的最大公约数并赋值为d，一直到最后得到的公差一定是最小的了。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">int</span> a[maxn];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a, a + n); </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            a[i] -= a[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> d = a[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; n; i++) &#123;</span><br><span class="line">            d = gcd(d, a[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(d) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; a[n - <span class="number">1</span>] / d + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="试题I-后缀表达式"><a href="#试题I-后缀表达式" class="headerlink" title="试题I: 后缀表达式"></a>试题I: 后缀表达式</h3><p>给定<code>N个加号、M个减号</code>以及<code>N+M+1</code>个整数<code>A<sub>1</sub>, A<sub>2</sub>, · · ·, A<sub>N+M+1</sub></code>小明想知道在所有由这<code>N个加号、M个减号</code>以及<code>N+M+1个整数</code>凑出的合法的<code>后缀表达式</code>中，结果最大的是哪一个?</p><p>请你输出这个最大的结果。<br>例如使用<code>1 2 3 + -</code>，则<code>2 3 + 1 -</code>这个后缀表达式结果是<code>4</code>，是最大的。</p><p>首先，这是一个后缀表达式的题，也就是说用n+1个大的数的和减去m个小的数的做法是错误的！！！<br>后缀表达式可以有括号，比如：<br>0个加号，2个减号，序列是：1 2 3<br>其最大值应该是<code>3 - (1 - 2) = 4</code><br>如果按照中缀表达式的思路那应该是<code>3 - 1 - 2 = 0</code>，这显然是错误的。<br>从上面可以知道一点是，后缀表达式中可以有括号，那么在括号里面的负号再加上外面的负号不就为正了？因此负号可以用这种思路来变成加号，也就是你可以把负号变成<code>1 ~ M</code>个。</p><p>1.如果序列中数没有负数。很显然，除开最小的数之外求和再减去最小的数那就是答案。<br>比如<code>1 2 3 4</code><br>3个减号0个加号<code>4 - (1 - 2 - 3) = 8</code><br>2个减号1个加号<code>4 + 3 - （1 - 2） = 8</code><br>1个减号2个加号<code>4 + 3 + 2 - 1 = 8</code><br>从上面的例子可以得知，只要序列中没有负数，无论有多少个减号（不为0）最后得到的答案是一样的。</p><p>2.如果序列中有负数。很显然<br>比如<code>-1 -2 -3 -4</code>　<br>3个减号0个加号<code>-1 - (-4) - (-3) - (-2) = 8</code><br>2个减号1个加号<code>-1 + (-2) - (-4) - (-3) = 4</code><br>1个减号2个加号<code>-1 + (-2) + (-3) - (-4) = -2</code><br>可以知道，负负得正，尽量让最小的负数取减号变成正数，最后得到的答案就是最大的和。</p><blockquote><p>　大概就是如上所言了，其实还挺复杂的，主要是要理清思路，代码如下。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="keyword">int</span> a[maxn], k = n + m + <span class="number">1</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">            sum += a[i];</span><br><span class="line">            <span class="keyword">if</span>(a[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a, a + k); </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(cnt == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(m) &#123;</span><br><span class="line">                sum -= <span class="number">2</span> * a[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt &amp;&amp; m &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">                sum -= a[i] * <span class="number">2</span>;</span><br><span class="line">                m--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="试题J-灵能传输"><a href="#试题J-灵能传输" class="headerlink" title="试题J: 灵能传输"></a>试题J: 灵能传输</h3><p>你控制着<code>n</code>名高阶圣堂武士，方便起见标为<code>1, 2, · · · , n</code>每名高阶圣堂武士需要一定的灵能来战斗，每个人有一个灵能值<code>a<sub>i</sub></code>表示其拥有的灵能的多少(<code>a<sub>i</sub></code>非负表示这名高阶圣堂武士比在最佳状态下<code>多余a<sub>i</sub></code>点灵能，<code>a<sub>i</sub></code>为负则表示这名高阶圣堂武士还<code>需要a<sub>i</sub></code>点灵能才能到达最佳战斗状态)。</p><p>现在系统赋予了你的高阶圣堂武士一个能力<code>传递灵能</code>每次你可以选择一个<code>i∈[2, n−1]</code>，若<code> a<sub>i</sub> ≥ 0 </code>则其两旁的高阶圣堂武士，也就是<code>i-1、i+1</code>这两名高阶圣堂武士会从<code>i</code>这名高阶圣堂武士这里各抽取<code>a<sub>i</sub></code>点灵能；若<code>a<sub>i</sub> &lt; 0</code>则其两旁的高阶圣堂武士，也就是<code>i−1, i+1</code>这两名高阶圣堂武士会给<code>i</code>这名高阶圣堂武士<code>−a<sub>i</sub></code>点灵能。</p><p>形式化来讲就是<code>a<sub>i-1</sub> += a<sub>i</sub>, a<sub>i+1</sub> += a<sub>i</sub> , a<sub>i</sub> −= 2a<sub>i</sub></code></p><p>灵能是非常高效的作战工具，同时也非常危险且不稳定，一位高阶圣堂武士拥有的灵能过多或者过少都不好,定义一组高阶圣堂武士的不稳定度为<code>max|a<sub>i</sub>| (1 &le; i &le; n)</code><br>请你通过不限次数的传递灵能操作使得你控制的这一组高阶圣堂武士的不稳定度最小。</p><blockquote><p>代码如下，无题解。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">300005</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t --) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum[maxn];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;sum[i]);</span><br><span class="line">            sum[i] += sum[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> s0 = sum[<span class="number">0</span>], sn = sum[n];</span><br><span class="line">        <span class="keyword">if</span>(s0 &gt; sn) &#123;</span><br><span class="line">            swap(s0, sn);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sort(sum, sum + n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s0 == sum[i]) &#123;</span><br><span class="line">                s0 = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">0</span>; i--)  &#123;</span><br><span class="line">            <span class="keyword">if</span>(sn == sum[i]) &#123;</span><br><span class="line">                sn = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> st[maxn];</span><br><span class="line">        <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span>(st));</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = n;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> a[maxn];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = s0; i &gt;= <span class="number">0</span>; i -= <span class="number">2</span>) &#123;</span><br><span class="line">            a[l++] = sum[i];</span><br><span class="line">            st[i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = sn; i &lt;= n; i += <span class="number">2</span>) &#123;</span><br><span class="line">            a[r--] = sum[i];</span><br><span class="line">            st[i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[i]) &#123;</span><br><span class="line">                a[l++] = sum[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            ans = max(ans, <span class="built_in">abs</span>(a[i] - a[i - <span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>蓝桥杯又被称作“暴力杯”、“数学杯”，不过这都不是我能体会到的，总的来说这次参加蓝桥杯其实是一个错误的选择，我没有很系统的学习ACM，仅仅这个水平去参加蓝桥杯也是送钱。题目或许都不难，很多人都说暴力就完事了，可惜我就是做不出来，没啥别的意思，ACM我不会系统的去搞，但是我会继续刷题，什么比赛我都不会去参加，仅仅只是把这个当做一个兴趣了。其他的就不多提了，我希望的是不耽误自己的学习的前提下去玩ACM，就这样吧，没想过要走这条路，就比如玩魔方，只是玩，没到废寝忘食的地步。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为推动软件开发技术的发展，促进软件专业技术人才培养，向软件行业输送具有创新能力和实践能力的高端人才，提升高校毕业生的就业竞争力，全面推动行业发展及人才培养进程，工业和信息化部人才交流中心特举办“全国软件专业人才设计与创业大赛”，本赛包括个人赛和团队赛两个比赛项目。&lt;/p&gt;
&lt;p&gt;个人赛设置：&lt;br&gt;1、C/C++程序设计（本科A组、本科B组、高职高专组）&lt;br&gt;2、Java软件开发（本科A组、本科B组、高职高专组）&lt;br&gt;3、嵌入式设计与开发（大学组、研究生组）&lt;br&gt;4、单片机设计与开发（大学组）&lt;br&gt;5、电子设计与开发（大学组）&lt;/p&gt;
&lt;p&gt;团队赛设置：软件创业赛一个科目组别。并且形成了立足行业，结合实际，实战演练，促进就业的特色。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://blog.iplua.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C++" scheme="https://blog.iplua.com/tags/C/"/>
    
      <category term="第十届蓝桥杯" scheme="https://blog.iplua.com/tags/%E7%AC%AC%E5%8D%81%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>PAT (Basic Level) Practice</title>
    <link href="https://blog.iplua.com/PAT-Basic-Level-Practice/"/>
    <id>https://blog.iplua.com/PAT-Basic-Level-Practice/</id>
    <published>2019-03-18T09:31:00.000Z</published>
    <updated>2019-05-26T06:01:35.825Z</updated>
    
    <content type="html"><![CDATA[<p>2019年3月30日，四十题打卡，此篇文章可能因为字数太多编辑器变得很卡很卡，所以我打算重新写一篇文章记后面的题目。再说一下最近的感受，题目难度确确实实不大，不过我的速度也太慢了，转眼快半个月了，我还做了不到一半，可见自己的底子有多差。这几天也改了一下自己写代码的习惯，所谓代码规范…感觉一个人一个规范，这还真不好说。</p><p>2019年3月23日，周六，雨天。完成了第三个十题，越到后面越来越复杂，现在还没有到一半，我感觉照这个速度我可能要做一个月，我大概了解了一下其他人的速度，最多最多也就半个月吧…明天就是蓝桥杯了，我这个都没有刷完，有点惭愧。题目的难度不算太难，不比之前做的算法题，这些题目都有固定的思路，只是代码比较繁琐，还有很多坑点。</p><p>2019年3月21日，真好，今天是春分。又做了十道题，最近生活及其不规律，十八号晚上和同学通宵去打游戏了，所以十九号睡了一天（还好那天没课）。二十号刷了八道题目吧，从晚上八点肝到了十一点半，之后又去水群水到了晚上十二点多，我估计我睡着应该快一点了，早上六点五十三的闹钟，实在起不来…还是说昨天做的题目吧，感觉比前面十道题目坑了好多，但是还算是简单的，除了那个大数的除法，我打算找个时间好好学学大数的运算，还有就是这十道题目排序算法偏多。</p><p>2019年3月18日，我觉得还是得刷一点题，这些题目难度不是很大，没有涉及什么算法，都是一些很基础的东西，自己基础本来就不好，所以打算把PAT的乙级题库刷一遍。水平有限，这里的AC代码没有多少参考性，很多题目都是硬着头皮写过去的，到目前为止，对比其他大佬的AC代码唯一的感觉就是自闭…</p><a id="more"></a><blockquote><p>什么是PAT:<br>浙江大学计算机程序设计能力考试（Programming AbilityTest，简称PAT）是由浙江大学计算机科学与技术学院组织的统一考试。旨在培养和展现学生分析问题、解决问题和计算机程序设计的能力，科学评价计算机程序设计人才，并为企业选拔人才提供参考标准。</p></blockquote><blockquote><p>PAT乙级要求掌握的知识:<br>1.具备基本的C/C++的代码设计能力，掌握相关开发环境的基本调试技巧；<br>2.理解并掌握最基本的数据结构，如：线性表、树、图等；<br>3.理解并熟练编程实现与基本数据结构相关的基础算法，包括递归、排序、查找等；<br>4.学会分析算法的时间复杂度、空间复杂度和算法稳定性；<br>5.具备问题抽象和建模的初步能力，并能够用所学方法解决实际问题。</p></blockquote><h2 id="1001-害死人不偿命的-3n-1-猜想"><a href="#1001-害死人不偿命的-3n-1-猜想" class="headerlink" title="1001 害死人不偿命的(3n+1)猜想"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805325918486528" target="_blank" rel="noopener">1001 害死人不偿命的(3n+1)猜想</a></h2><p>卡拉兹(Callatz)猜想：</p><p>对任何一个正整数 n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3n+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 n=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p><p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 n，简单地数一下，需要多少步（砍几下）才能得到 n=1？</p><blockquote><p>这一题很简单，写法应该就是这样子了，没啥坑点，跟着题意写就可以了。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(n % <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">              n = <span class="number">3</span>*n + <span class="number">1</span>;</span><br><span class="line">                </span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">            ans += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1002-写出这个数"><a href="#1002-写出这个数" class="headerlink" title="1002 写出这个数"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805324509200384" target="_blank" rel="noopener">1002 写出这个数</a></h2><p>读入一个正整数 n，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p><blockquote><p>这题也比较简单，我的做法是把输入的数据每位数字求和，然后把和的每一位照题意输出，也就是硬着头皮写的。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[<span class="number">105</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;arr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>, l = <span class="built_in">strlen</span>(arr);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++)</span><br><span class="line">            sum += arr[i] - <span class="string">'0'</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> w = sum, x[<span class="number">105</span>], h = <span class="number">1</span>, k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(w &gt;= <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x[k++] =  w % <span class="number">10</span>;</span><br><span class="line">            w /= <span class="number">10</span>;</span><br><span class="line">            h ++;</span><br><span class="line">        &#125;</span><br><span class="line">        x[k] = w;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> str[<span class="number">15</span>][<span class="number">3</span>] = &#123;<span class="string">"ling"</span>, <span class="string">"yi"</span>, <span class="string">"er"</span>, <span class="string">"san"</span>, <span class="string">"si"</span>, <span class="string">"wu"</span>, <span class="string">"liu"</span>, <span class="string">"qi"</span>, <span class="string">"ba"</span>, <span class="string">"jiu"</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = h; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;str[x[i]];</span><br><span class="line">            <span class="keyword">if</span>(i != <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1003-我要通过"><a href="#1003-我要通过" class="headerlink" title="1003 我要通过!"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805323154440192" target="_blank" rel="noopener">1003 我要通过!</a></h2><p>“答案正确”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“答案正确”大派送 —— 只要读入的字符串满足下列条件，系统就输出“答案正确”，否则输出“答案错误”。</p><p>得到“答案正确”的条件是：</p><p>1.字符串中必须仅有 P、 A、 T这三种字符，不可以包含其它字符；<br>2.任意形如 xPATx 的字符串都可以获得“答案正确”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串；<br>3.如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a、 b、 c 均或者是空字符串，或者是仅由字母 A 组成的字符串。</p><p>现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“答案正确”的。</p><blockquote><p>这题像阅读理解，半天半天没看懂题意，最后看了大佬们的题解，其实也就是一个关键判断条件，P前面的A的总数和中间的A的总数的乘积要等于T后面的A的总数，感觉没啥意思，我写的很乱。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> str[<span class="number">105</span>];</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len<span class="number">-1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i] != <span class="string">'P'</span> &amp;&amp; str[i] != <span class="string">'A'</span> &amp;&amp; str[i] != <span class="string">'T'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> p_num = <span class="number">0</span>, t_num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len<span class="number">-1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">'P'</span>)</span><br><span class="line">                p_num++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str[i] == <span class="string">'T'</span>)</span><br><span class="line">                t_num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="literal">false</span> || len &lt; <span class="number">3</span> || p_num &gt; <span class="number">1</span> || t_num &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a, b, c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len<span class="number">-1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">'P'</span>)</span><br><span class="line">                a = i;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str[i] == <span class="string">'T'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                b = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        b = b - (a + <span class="number">1</span>);</span><br><span class="line">        c = len - (a + b + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(a * b == c)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1004-成绩排名"><a href="#1004-成绩排名" class="headerlink" title="1004 成绩排名"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805321640296448" target="_blank" rel="noopener">1004 成绩排名</a></h2><p>读入 n（&gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p><blockquote><p>用了结构体和一个排序函数，没什么特别的地方，我想题目本意应该是考察冒泡排序这种算法，但是有了sort…</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>], number[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(struct stu a, struct stu b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.score &lt; b.score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">test</span>[1000];</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;test[i].name&gt;&gt;test[i].number&gt;&gt;test[i].score;</span><br><span class="line"></span><br><span class="line">sort(test + <span class="number">1</span>, test + <span class="number">1</span> + n, cmp);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;test[n].name&lt;&lt;<span class="string">" "</span>&lt;&lt;test[n].number&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;test[<span class="number">1</span>].name&lt;&lt;<span class="string">" "</span>&lt;&lt;test[<span class="number">1</span>].number&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1005-继续-3n-1-猜想"><a href="#1005-继续-3n-1-猜想" class="headerlink" title="1005 继续(3n+1)猜想"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805320306507776" target="_blank" rel="noopener">1005 继续(3n+1)猜想</a></h2><p>卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。</p><p>当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 n=3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 n=5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 n 为“关键数”，如果 n 不能被数列中的其他数字所覆盖。</p><p>现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p><blockquote><p>我的写法又是硬着头皮的，我把每个数都验证了一遍，找出了所有的被覆盖数，然后剩下的输出就完事了。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">105</span>], n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">        sort(arr + <span class="number">1</span>, arr + <span class="number">1</span> + n, cmp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> brr[<span class="number">105</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            brr[i] = arr[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> vis[<span class="number">4500</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(brr[i] != <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(brr[i] % <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">                    brr[i] = brr[i]*<span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">                brr[i] /= <span class="number">2</span>;</span><br><span class="line">                vis[brr[i]] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[arr[i]] == <span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(flag == <span class="literal">true</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;arr[i];</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1006-换个格式输出整数"><a href="#1006-换个格式输出整数" class="headerlink" title="1006 换个格式输出整数"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805318855278592" target="_blank" rel="noopener">1006 换个格式输出整数</a></h2><p>让我们用字母 B 来表示“百”、字母 S 表示“十”，用 12…n 来表示不为零的个位数字 n（&lt;10），换个格式来输出任一个不超过 3 位的正整数。例如 234 应该被输出为 BBSSS1234，因为它有 2 个“百”、3 个“十”、以及个位的 4。</p><blockquote><p>这题就不说了，感觉自己捡了个漏子，我把个十百都求出来了，然后输出的…</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> g = n % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> s = n / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = n / <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= g; i++)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n &lt; <span class="number">100</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s; i++)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"S"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= g; i++)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= b; i++)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"B"</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s; i++)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"S"</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= g; i++)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1007-素数对猜想"><a href="#1007-素数对猜想" class="headerlink" title="1007 素数对猜想"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805317546655744" target="_blank" rel="noopener">1007 素数对猜想</a></h2><p>让我们定义d(n)为：d(n)=p(n+1) − p(n)，其中pi是第i个素数。显然有d1=1，且对于n&gt;1有d(n)是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。</p><p>现给定任意正整数N(&lt;10^5)，请计算不超过N的满足猜想的素数对的个数。</p><blockquote><p>这题写法应该没多大问题，也不知道别人怎么写的，反正我是把所有的素数求了一遍，至少题目的要求范围内没有任何问题，这里我得抱怨一下，我感觉PTA的只有五组的判断数据也太少了一点吧，搞不好我是错的水数据过了我都不知道。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(x); i++)</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp, sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(is_prime(i) == <span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(flag == <span class="literal">true</span> &amp;&amp; (i - temp) == <span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                temp = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1008-数组元素循环右移问题"><a href="#1008-数组元素循环右移问题" class="headerlink" title="1008 数组元素循环右移问题"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805316250615808" target="_blank" rel="noopener">1008 数组元素循环右移问题</a></h2><blockquote><p>捡了个空，弄了两个数组做的，没啥可提的，以后再看看其他人的做法，反正这个写法应该完全是错的。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> arr[<span class="number">105</span>], brr[<span class="number">105</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(m == n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i == n)</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;arr[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;arr[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(m &gt; n)</span><br><span class="line">                m -= n;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i + m &lt;= n)</span><br><span class="line">                    brr[i+m] = arr[i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> x = i + m - n;</span><br><span class="line">                    brr[x] = arr[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i == n)</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;brr[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;brr[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1009-说反话"><a href="#1009-说反话" class="headerlink" title="1009 说反话"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805314941992960" target="_blank" rel="noopener">1009 说反话</a></h2><p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</p><blockquote><p>这题…不会做，参考别人的代码写的。也是很简单的一题，但是我用cin和scanf的时候竟然妄想把空格也输入进去，简直不可理喻…</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; ;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str[j]);</span><br><span class="line">        <span class="keyword">if</span>(getchar() == <span class="string">'\n'</span>) </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = j; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>, str[i]);</span><br><span class="line">        <span class="keyword">if</span>(i != <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1010-一元多项式求导"><a href="#1010-一元多项式求导" class="headerlink" title="1010 一元多项式求导"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805313708867584" target="_blank" rel="noopener">1010 一元多项式求导</a></h2><p>设计函数求一元多项式的导数。（注：x^n（n为整数）的一阶导数为nx^(n−1)。）</p><blockquote><p>这题唯一坑点在输入，以及0多项式也要输出一个”0 0”，其他的没什么难点。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s, e;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s&gt;&gt;e;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(e == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"0 0"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s*e&lt;&lt;<span class="string">" "</span>&lt;&lt;e<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(e != <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;s*e&lt;&lt;<span class="string">" "</span>&lt;&lt;e<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1011-A-B-和-C"><a href="#1011-A-B-和-C" class="headerlink" title="1011 A+B 和 C"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805312417021952" target="_blank" rel="noopener">1011 A+B 和 C</a></h2><p>给定区间 [−2^31,2^31] 内的 3 个整数 A、B 和 C，请判断 A+B 是否大于 C。</p><blockquote><p>这题不用调试了，直接交吧，就是这么简单</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> a, b , c;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;k++&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">        <span class="keyword">if</span>(a + b &gt; c)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"true"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"false"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1012-数字分类"><a href="#1012-数字分类" class="headerlink" title="1012 数字分类"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805311146147840" target="_blank" rel="noopener">1012 数字分类</a></h2><blockquote><p>这道题难度不高，最主要的是有些繁琐，不知道有没有其他更好的写法，我完全按照题意来的…代码较长</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>, sum4 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> num1, num3 = <span class="number">0</span>, num4 = <span class="number">0</span>, num5 = <span class="number">0</span>, k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">bool</span> vis[<span class="number">1005</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num1);</span><br><span class="line">            <span class="keyword">if</span>(num1 % <span class="number">5</span> == <span class="number">0</span> &amp;&amp; num1 % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum1 += num1;</span><br><span class="line">                vis[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(num1 % <span class="number">5</span> == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                vis[<span class="number">2</span>] = <span class="literal">true</span>;</span><br><span class="line">                sum2 = sum2 + k*num1;</span><br><span class="line">                k *= <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(num1 % <span class="number">5</span> == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                vis[<span class="number">3</span>] = <span class="literal">true</span>;</span><br><span class="line">                num3++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(num1 % <span class="number">5</span> == <span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                vis[<span class="number">4</span>] = <span class="literal">true</span>;</span><br><span class="line">                sum4 += num1;</span><br><span class="line">                num4++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(num1 % <span class="number">5</span> == <span class="number">4</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                vis[<span class="number">5</span>] = <span class="literal">true</span>;</span><br><span class="line">                num5 = num1 &gt; num5 ? num1 : num5;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span>(i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span>(vis[i] == <span class="literal">true</span>)</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%d "</span>, sum1);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"N "</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span>(vis[i] == <span class="literal">true</span>)</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%d "</span>, sum2);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"N "</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    <span class="keyword">if</span>(vis[i] == <span class="literal">true</span>)</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%d "</span>, num3);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"N "</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    <span class="keyword">if</span>(vis[i] == <span class="literal">true</span>)</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%.1lf "</span>, (<span class="keyword">double</span>)sum4 / num4);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"N "</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    <span class="keyword">if</span>(vis[i] == <span class="literal">true</span>)</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num5);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"N\n"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1013-数素数"><a href="#1013-数素数" class="headerlink" title="1013 数素数"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805309963354112" target="_blank" rel="noopener">1013 数素数</a></h2><p>令 Pi表示第 i 个素数。现任给两个正整数 M≤N≤10^4，请输出 PM到 PN的所有素数。</p><blockquote><p>题目要求不多，素数而已，很简单的一个东西，也没说不能打表，所以把要求的素数全部求出来记录就好了，然后输出。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(x); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, j = <span class="number">0</span>, arr[<span class="number">10005</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; j &lt;= <span class="number">10000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(is_prime(i) == <span class="literal">true</span>)</span><br><span class="line">            arr[++j] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(num == <span class="number">10</span> || i == m)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;arr[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                num = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;arr[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1014-福尔摩斯的约会"><a href="#1014-福尔摩斯的约会" class="headerlink" title="1014 福尔摩斯的约会"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805308755394560" target="_blank" rel="noopener">1014 福尔摩斯的约会</a></h2><p>大侦探福尔摩斯接到一张奇怪的字条：我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&amp;hgsfdk d&amp;Hyscvnm。大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间星期四 14:04，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 D，代表星期四；第 2 对相同的字符是 E ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 A 到 N 表示）；后面两字符串第 1 对相同的英文字母 s 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。</p><blockquote><p>不得不说，这种题目真的坑点挺多了，题目越长越应该仔细看，不能漏过任何的内容，不然就是WA警告…前两个字符串，首先要找一对一样的大写字母（A到G），然后要找第二队一样的相同的字符（0到9或者A到N）。后两个字符串找第一对相同的字符出现的位置即可。不难，但是注意的细节很多，果然是给初学者的题目。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str1[<span class="number">65</span>], str2[<span class="number">65</span>], str3[<span class="number">65</span>], str4[<span class="number">65</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str1&gt;&gt;str2&gt;&gt;str3&gt;&gt;str4)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span> week[<span class="number">10</span>][<span class="number">16</span>] = &#123;<span class="string">"MON"</span>, <span class="string">"TUE"</span>, <span class="string">"WED"</span>, <span class="string">"THU"</span>, <span class="string">"FRI"</span>, <span class="string">"SAT"</span>, <span class="string">"SUN"</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str1); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str1[i] == str2[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(tag == <span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(str1[i] &gt;= <span class="string">'0'</span> &amp;&amp; str1[i] &lt;= <span class="string">'9'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;str1[i]&lt;&lt;<span class="string">":"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(str1[i] &gt;= <span class="string">'A'</span> &amp;&amp; str1[i] &lt;= <span class="string">'N'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;str1[i] - <span class="string">'A'</span> + <span class="number">10</span>&lt;&lt;<span class="string">":"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(str1[i] &gt;= <span class="string">'A'</span> &amp;&amp; str2[i] &lt;= <span class="string">'G'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;week[str1[i] - <span class="string">'A'</span>]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">                        tag = <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str3); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((str3[i] &gt;= <span class="string">'a'</span> &amp;&amp; str3[i] &lt;= <span class="string">'z'</span>) || (str3[i] &gt;= <span class="string">'A'</span> &amp;&amp; str3[i] &lt;= <span class="string">'Z'</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(str3[i] == str4[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i &lt; <span class="number">10</span>)</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1015-德才论"><a href="#1015-德才论" class="headerlink" title="1015 德才论"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805307551629312" target="_blank" rel="noopener">1015 德才论</a></h2><p>宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”</p><p>现给出一批考生的德才分数，请根据司马光的理论给出录取排名。</p><blockquote><p>这题其实挺复杂的，不过总的来说它还是一个分批次排序的题目，写好了排序算法就好了，不过咱们有sort函数，所以写compare就好了。首先把批次分好，然后第二个依据是总分，然后是德分，最后是学号。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id, dscore, cscore;</span><br><span class="line">    <span class="keyword">int</span> zf, pici;</span><br><span class="line">    <span class="keyword">bool</span> luqu;</span><br><span class="line">&#125;t[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(struct stu a, struct stu b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.pici != b.pici)</span><br><span class="line">        <span class="keyword">return</span> a.pici &lt; b.pici;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.zf != b.zf)</span><br><span class="line">        <span class="keyword">return</span> a.zf &gt; b.zf;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.dscore != b.dscore)</span><br><span class="line">        <span class="keyword">return</span> a.dscore &gt; b.dscore;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.id &lt; b.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, l, h;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;l&gt;&gt;h)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;t[i].id&gt;&gt;t[i].dscore&gt;&gt;t[i].cscore;</span><br><span class="line">            t[i].zf = t[i].dscore + t[i].cscore;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(t[i].dscore &gt;= l &amp;&amp; t[i].cscore &gt;= l)</span><br><span class="line">            &#123;</span><br><span class="line">                sum ++;</span><br><span class="line">                t[i].luqu = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(t[i].dscore &gt;= h &amp;&amp; t[i].cscore &gt;= h)</span><br><span class="line">                    t[i].pici = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(t[i].dscore &gt;= h &amp;&amp; t[i].cscore &lt; h)</span><br><span class="line">                    t[i].pici = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(t[i].dscore &lt; h &amp;&amp; t[i].cscore &lt; h &amp;&amp; t[i].dscore &gt;= t[i].cscore)</span><br><span class="line">                    t[i].pici = <span class="number">3</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    t[i].pici = <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                t[i].luqu = <span class="literal">false</span>;</span><br><span class="line">                t[i].pici = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(t, t + n, cmp);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t[i].luqu == <span class="literal">true</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, t[i].id, t[i].dscore, t[i].cscore);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1016-部分A-B"><a href="#1016-部分A-B" class="headerlink" title="1016 部分A+B"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805306310115328" target="_blank" rel="noopener">1016 部分A+B</a></h2><blockquote><p>很简单的一个题目，既然题目要求输入的只有10^10，那我就直接把这个数拆解了，然后找出符合的个数，最后把这个合起来，最后再求和，就这样子了，虽然写法很笨，但是不影响什么的…也多亏PTA对程序的空间时间要求都不高…</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a, d_a, b, d_b;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;d_a&gt;&gt;b&gt;&gt;d_b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> num_a = <span class="number">0</span>, num_b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(a || b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a % <span class="number">10</span> == d_a)   num_a++;</span><br><span class="line">            <span class="keyword">if</span>(b % <span class="number">10</span> == d_b)   num_b++;</span><br><span class="line"></span><br><span class="line">            a /= <span class="number">10</span>;</span><br><span class="line">            b /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum_a = <span class="number">0</span>, sum_b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(num_a || num_b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(num_a)   sum_a += d_a*<span class="built_in">pow</span>(<span class="number">10</span>, --num_a);</span><br><span class="line">            <span class="keyword">if</span>(num_b)   sum_b += d_b*<span class="built_in">pow</span>(<span class="number">10</span>, --num_b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum_a + sum_b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1017-A除以B"><a href="#1017-A除以B" class="headerlink" title="1017 A除以B"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805305181847552" target="_blank" rel="noopener">1017 A除以B</a></h2><blockquote><p>输入一个很大很大的数和一个个位数，要求余数和商数。大数除法，也是大数运算中最难的一个，在参考大佬们博客的过程中我发现这道题目也似乎有一些不一样，就是说这个大数除法简单一些…不过我还是没办法理解…这题先放着吧。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t = (s[<span class="number">0</span>] - <span class="string">'0'</span>) / b;</span><br><span class="line">        <span class="keyword">if</span>(t != <span class="number">0</span> &amp;&amp; s.length() &gt; <span class="number">1</span> || s.length() == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;t;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> p = (s[<span class="number">0</span>] - <span class="string">'0'</span>) % b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.length(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            t = (p*<span class="number">10</span> + s[i] - <span class="string">'0'</span>) / b;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;t;</span><br><span class="line">            p = (p*<span class="number">10</span> + s[i] - <span class="string">'0'</span>) % b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;p&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这题无法理解，大数的加减乘除现在没怎么接触过，有时间再说吧。</span></span><br></pre></td></tr></table></figure><h2 id="1018-锤子剪刀布"><a href="#1018-锤子剪刀布" class="headerlink" title="1018 锤子剪刀布"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805304020025344" target="_blank" rel="noopener">1018 锤子剪刀布</a></h2><blockquote><p>两个人玩锤子剪刀布，要计算出各自赢的场数和赢的最多的手势，这题…不可理喻…</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &gt;= b)    <span class="keyword">return</span> a &gt;= c ? <span class="number">1</span> : <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">else</span>    <span class="keyword">return</span> b &gt;= c ? <span class="number">2</span> : <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> a, b;</span><br><span class="line">        <span class="keyword">int</span> p, a_win, b_win;</span><br><span class="line">        p = a_win = b_win = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a_win_c_num, a_win_j_num, a_win_b_num;</span><br><span class="line">        a_win_c_num = a_win_j_num = a_win_b_num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> b_win_c_num, b_win_j_num, b_win_b_num;</span><br><span class="line">        b_win_c_num = b_win_j_num = b_win_b_num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">            <span class="keyword">if</span>(a == b)</span><br><span class="line">                p++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a == <span class="string">'C'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(b == <span class="string">'J'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        a_win++;</span><br><span class="line">                        a_win_c_num++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        b_win++;</span><br><span class="line">                        b_win_b_num++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="string">'J'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(b == <span class="string">'B'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        a_win++;</span><br><span class="line">                        a_win_j_num++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        b_win++;</span><br><span class="line">                        b_win_c_num++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(b == <span class="string">'C'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        a_win++;</span><br><span class="line">                        a_win_b_num++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        b_win++;</span><br><span class="line">                        b_win_j_num++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a_win&lt;&lt;<span class="string">" "</span>&lt;&lt;p&lt;&lt;<span class="string">" "</span>&lt;&lt;b_win&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;b_win&lt;&lt;<span class="string">" "</span>&lt;&lt;p&lt;&lt;<span class="string">" "</span>&lt;&lt;a_win&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a_win_max_sign = max(a_win_b_num, a_win_c_num, a_win_j_num);</span><br><span class="line">        <span class="keyword">int</span> b_win_max_sign = max(b_win_b_num, b_win_c_num, b_win_j_num);</span><br><span class="line">        <span class="keyword">if</span>(a_win_max_sign == <span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"B "</span>;</span><br><span class="line">        <span class="keyword">if</span>(a_win_max_sign == <span class="number">2</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"C "</span>;</span><br><span class="line">        <span class="keyword">if</span>(a_win_max_sign == <span class="number">3</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"J "</span>;</span><br><span class="line">        <span class="keyword">if</span>(b_win_max_sign == <span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"B"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(b_win_max_sign == <span class="number">2</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"C"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(b_win_max_sign == <span class="number">3</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"J"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1019-数字黑洞"><a href="#1019-数字黑洞" class="headerlink" title="1019 数字黑洞"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805302786899968" target="_blank" rel="noopener">1019 数字黑洞</a></h2><p>给定任一个各位数字不完全相同的 4 位正整数，如果我们先把 4 个数字按非递增排序，再按非递减排序，然后用第 1 个数字减第 2 个数字，将得到一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的 6174，这个神奇的数字也叫 Kaprekar 常数。</p><blockquote><p>不需要想太复杂，输入用整数就好了，然后把这个整数转化成数组，然后对这个数组两次排序即可求得最大和最小的值。不得不吐槽一下，这个非递增和非递减几个意思，还有乱序不成？你直接写递增就递增不就好了。然后把最大值和最小值转化成数值，然后求得差值又要把这个数转化成数组，如此循环，直到差值等于0或者6174。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">num</span><span class="params">(<span class="keyword">int</span> arr[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        sum = sum*<span class="number">10</span> + arr[i];</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">to_arr</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[i] = n % <span class="number">10</span>;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, arr[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            to_arr(arr, n);</span><br><span class="line">            sort(arr, arr + <span class="number">4</span>);</span><br><span class="line">            <span class="keyword">int</span> min_n = num(arr);</span><br><span class="line">            sort(arr, arr + <span class="number">4</span>, cmp);</span><br><span class="line">            <span class="keyword">int</span> max_n = num(arr);</span><br><span class="line"></span><br><span class="line">            n = max_n - min_n;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%04d - %04d = %04d\n"</span>, max_n, min_n, n);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(n == <span class="number">6174</span> || n == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1020-月饼"><a href="#1020-月饼" class="headerlink" title="1020 月饼"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805301562163200" target="_blank" rel="noopener">1020 月饼</a></h2><blockquote><p>时间过得真快，转眼间已经有四个多月了，我的typecho博客第一篇文章就是这样子的一道题目，可惜原本的数据库被我删了，现在啥也没有了。这题换了一个说法，本质上也就是一个排序加贪心的东西，进步还是有点的，看到这种题目直接上手就干了，只是要注意段错误这点…也就是数组下标溢出。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> kc, sj;</span><br><span class="line">&#125;yb[<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(struct node a, struct node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.sj / a.kc) &gt; (b.sj / b.kc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;yb[i].kc;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;yb[i].sj;</span><br><span class="line"></span><br><span class="line">        sort(yb, yb + n, cmp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(m &amp;&amp; i++ &lt; n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(yb[i].kc &gt;= m)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += m / yb[i].kc * yb[i].sj;</span><br><span class="line">                m -= m;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                sum += yb[i].sj;</span><br><span class="line">                m -= yb[i].kc;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1021-个位数统计"><a href="#1021-个位数统计" class="headerlink" title="1021 个位数统计"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805300404535296" target="_blank" rel="noopener">1021 个位数统计</a></h2><blockquote><p>我摸清楚了一个规律，那就是每5道之后的一题都是比较简单的，我觉PAT得这一点做的很好，哈哈。<br>这题思路很清晰，输入数据之后用另外一个数组把出现的数字的次数记录下来，最后输出次数不为0的结果。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">1005</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">int</span> arr[<span class="number">15</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            arr[str[i] - <span class="string">'0'</span>]++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] != <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">":"</span>&lt;&lt;arr[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1022-D进制的A-B"><a href="#1022-D进制的A-B" class="headerlink" title="1022 D进制的A+B"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805299301433344" target="_blank" rel="noopener">1022 D进制的A+B</a></h2><p>输入两个非负 10 进制整数 A 和 B (≤2^30−1)，输出 A+B 的 D (1&lt;D≤10)进制数。</p><blockquote><p>进制转化，前几天还做过类似的题目，但是这题却没有一发A…首先注意特例0直接输出0，此后用常规方法求余数并用数组存起来，最后反向输出数组。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, d;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;d)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = a + b;</span><br><span class="line">        <span class="keyword">int</span> ans[<span class="number">50</span>], i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sum == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(sum)</span><br><span class="line">        &#123;</span><br><span class="line">            ans[i++] = sum % d;</span><br><span class="line">            sum /= d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(--i &gt;= <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ans[i];</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1023-组个最小数"><a href="#1023-组个最小数" class="headerlink" title="1023 组个最小数"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805298269634560" target="_blank" rel="noopener">1023 组个最小数</a></h2><p>给定数字 0-9 各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意 0 不能做首位）。例如：给定两个 0，两个 1，三个 5，一个 8，我们得到的最小的数就是 10015558。</p><p>现给定数字，请编写程序输出能够组成的最小的数。</p><blockquote><p>这道题比较简单，如果我思路没有错的话，输入数据之后算出实际的数组和数据总数，然后用sort把数组按从小到大的顺序排序，然后找到最小的那个数。首先输出最小的那个数，然后按照数组的顺序输出其他的数除开一个最小数。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, num = <span class="number">0</span>, min_n = <span class="number">11</span>, arr[<span class="number">55</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = num; j &lt; x + num; j++)</span><br><span class="line">            arr[j] = i;</span><br><span class="line">        num += x;</span><br><span class="line">        <span class="keyword">if</span>(x != <span class="number">0</span> &amp;&amp; i != <span class="number">0</span>)</span><br><span class="line">            min_n = min_n &lt; i ? min_n : i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sort(arr, arr + num);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] == min_n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">                arr[i] = arr[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[<span class="number">0</span>] = min_n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;arr[i];</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1024-科学计数法"><a href="#1024-科学计数法" class="headerlink" title="1024 科学计数法"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805297229447168" target="_blank" rel="noopener">1024 科学计数法</a></h2><p>现以科学计数法的格式给出实数 A，请编写程序按普通数字表示法输出 A，并保证所有有效位都被保留。</p><blockquote><p>我认为这道题就算是复杂的题目了，给出科学计数法然后写成普通的，这道题告诉我们怎么化简单为复杂…<br>首先有负号先输出负号，然后判断指数正负大小，注释写了。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'-'</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"-"</span>;</span><br><span class="line">        <span class="comment">//有负号先输出</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(s[pos] != <span class="string">'E'</span>)</span><br><span class="line">            pos++;</span><br><span class="line">        <span class="comment">//找到‘E’所在的位置</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">exp</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = pos + <span class="number">2</span>; i &lt; len; i++)</span><br><span class="line">            <span class="built_in">exp</span> = <span class="built_in">exp</span>*<span class="number">10</span> + (s[i] - <span class="string">'0'</span>);</span><br><span class="line">        <span class="comment">//计算得到指数exp</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果指数为0直接输出‘E’前面的数</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">exp</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; pos; i++)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[pos+<span class="number">1</span>] == <span class="string">'-'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//判断指数不为0时E后面的符号，如果为负，先输出'0.'</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"0."</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">exp</span> - <span class="number">1</span>; i++)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>;</span><br><span class="line">            <span class="comment">//紧接着输出exp - 1个'0'</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; pos; i++)</span><br><span class="line">                <span class="keyword">if</span>(s[i] != <span class="string">'.'</span>)</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;s[i];</span><br><span class="line">            <span class="comment">//最后输出从第一个字符到’E'之间的除'.'之外的字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//指数非0且E后面的符号为正时</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; pos; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i] != <span class="string">'.'</span>)</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;s[i];</span><br><span class="line">                <span class="comment">//输出从第一个字符到’E'之间的除'.'之外的字符</span></span><br><span class="line">                <span class="keyword">if</span>(i == <span class="built_in">exp</span> + <span class="number">2</span> &amp;&amp; i != (pos - <span class="number">1</span>))</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"."</span>;</span><br><span class="line">                <span class="comment">//如果字符串的长度大于指数+2需要输出'.'</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//最后补零，零的个数是指数减去'.'到'E'的位数，也就是pos - 3</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">exp</span> - (pos - <span class="number">3</span>); i++)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1025-反转链表"><a href="#1025-反转链表" class="headerlink" title="1025 反转链表"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805296180871168" target="_blank" rel="noopener">1025 反转链表</a></h2><p>给定一个常数 K 以及一个单链表 L，请编写程序将 L 中每 K 个结点反转。例如：给定 L 为 1→2→3→4→5→6，K 为 3，则输出应该为 3→2→1→6→5→4；如果 K 为 4，则输出应该为 4→3→2→1→5→6，即最后不到 K 个元素不反转。</p><blockquote><p>哎，你说反转链表就反转呗，为何要把题目搞这么复杂，如果普通的反转链表我肯定会老老实实去写。这道题最开始我压根就没想要用链表写，我想直接水过去…然而我想多了，最后还是老老实实来了，不过其实最关键的部分还是用的reverse函数…其他部分要注意的输入的时候，用地址来作为标准存储数据，然后用另外一个结构体指针数组来指向本来的结构体数组以方便reverse，最后输出的时候下一个地址应该是用下一个结构体指针数组的地址，以及最后一个数的next地址用-1不补零。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> address, next_address;</span><br><span class="line">&#125;a[maxn], *b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> begin_address, n, m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;begin_address&gt;&gt;n&gt;&gt;m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> data, address, next_address;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;address&gt;&gt;data&gt;&gt;next_address;</span><br><span class="line">            a[address].address = address;</span><br><span class="line">            a[address].data = data;</span><br><span class="line">            a[address].next_address = next_address;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = begin_address; i != <span class="number">-1</span>; i = a[i].next_address)</span><br><span class="line">            b[j++] = &amp;a[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= j - m; i += m)</span><br><span class="line">            reverse(b + i, b + i + m);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; j; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i != j - <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%05d %d %05d\n"</span>, b[i]-&gt;address, b[i]-&gt;data, b[i + <span class="number">1</span>]-&gt;address);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%05d %d -1\n"</span>, b[i]-&gt;address, b[i]-&gt;data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1026-程序运行时间"><a href="#1026-程序运行时间" class="headerlink" title="1026 程序运行时间"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805295203598336" target="_blank" rel="noopener">1026 程序运行时间</a></h2><blockquote><p>这道题不难，需要注意的一点是差值/100不足1需要四舍五入，也就是后两位数和50相比较判断是否+1</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> c = b - a;</span><br><span class="line">        <span class="keyword">if</span>(c % <span class="number">100</span> &gt;= <span class="number">50</span>)</span><br><span class="line">            c = c / <span class="number">100</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            c = c / <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d\n"</span>, c / <span class="number">3600</span>, c % <span class="number">3600</span> / <span class="number">60</span>, c % <span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1027-打印沙漏"><a href="#1027-打印沙漏" class="headerlink" title="1027 打印沙漏"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805294251491328" target="_blank" rel="noopener">1027 打印沙漏</a></h2><blockquote><p>这道题应该是去年天梯赛的第二题，也算是初学者要写的题目，也就不知道我这个代码像不像初学者，嘿嘿…</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;c)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n, sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(n = <span class="number">1</span>; ; n += <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            n == <span class="number">1</span> ? sum += n : sum += n*<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(sum &gt; a)</span><br><span class="line">            &#123;</span><br><span class="line">                sum -= n*<span class="number">2</span>;</span><br><span class="line">                n -= <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> z = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i -= <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= z; j++)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            z++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= i; k++)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;c;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        z--;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i += <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            z--;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= z; j++)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= i; k++)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;c;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;(a - sum)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1028-人口普查"><a href="#1028-人口普查" class="headerlink" title="1028 人口普查"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805293282607104" target="_blank" rel="noopener">1028 人口普查</a></h2><p>某城镇进行人口普查，得到了全体居民的生日。现请你写个程序，找出镇上最年长和最年轻的人。</p><p>这里确保每个输入的日期都是合法的，但不一定是合理的——假设已知镇上没有超过 200 岁的老人，而今天是 2014 年 9 月 6 日，所以超过 200 岁的生日和未出生的生日都是不合理的，应该被过滤掉。</p><blockquote><p>我想问谁活了200年…此题不是太难，思路参考了一个CSDN博主，也就是年月日用一个数来表示，之后的判断什么的都很简单。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> yy, mm, dd;</span><br><span class="line">&#125;temp, temp_max, temp_min;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> max_yyr = <span class="number">18140906</span>, min_yyr = <span class="number">20140906</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> temp_min_yyr = max_yyr, temp_max_yyr = min_yyr;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, max_i = <span class="number">0</span>, min_i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s %d/%d/%d"</span>, temp.name, &amp;temp.yy, &amp;temp.mm, &amp;temp.dd);</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> sum = temp.yy*<span class="number">10000</span> + temp.mm*<span class="number">100</span> + temp.dd;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(sum &gt;= max_yyr &amp;&amp; sum &lt;= min_yyr)</span><br><span class="line">            &#123;</span><br><span class="line">                x++;</span><br><span class="line">                <span class="keyword">if</span>(sum &lt; temp_max_yyr)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp_max_yyr = sum;</span><br><span class="line">                    <span class="built_in">strcpy</span>(temp_max.name, temp.name);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(sum &gt; temp_min_yyr)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp_min_yyr = sum;</span><br><span class="line">                    <span class="built_in">strcpy</span>(temp_min.name, temp.name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x != <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">" "</span>&lt;&lt;temp_max.name&lt;&lt;<span class="string">" "</span>&lt;&lt;temp_min.name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1029-旧键盘"><a href="#1029-旧键盘" class="headerlink" title="1029 旧键盘"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805292322111488" target="_blank" rel="noopener">1029 旧键盘</a></h2><p>旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及实际被输入的文字，请你列出肯定坏掉的那些键。</p><blockquote><p>先把两个字符串所有的小写字母转化成大写字母，分别用两个数组统计输入的两个字符串出现的字符，最后比较两个统计数组，输出差异字符。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_big</span><span class="params">(<span class="keyword">char</span> str[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span>(str[i] &gt;= <span class="string">'a'</span> &amp;&amp; str[i] &lt;= <span class="string">'z'</span>)</span><br><span class="line">            str[i] = str[i] - <span class="string">'a'</span> + <span class="string">'A'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">100</span>], b[<span class="number">100</span>], vis_a[<span class="number">100</span>], vis_b[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len_a = <span class="built_in">strlen</span>(a);</span><br><span class="line">        <span class="keyword">int</span> len_b = <span class="built_in">strlen</span>(b);</span><br><span class="line">        <span class="keyword">int</span> k_a = <span class="number">0</span>, k_b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        to_big(a, len_a);</span><br><span class="line">        to_big(b, len_b);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len_a; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k_a; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i] == vis_a[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)</span><br><span class="line">                vis_a[k_a++] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len_b; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k_b; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(b[i] == vis_b[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)</span><br><span class="line">                vis_b[k_b++] = b[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k_a; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k_b; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(vis_b[j] == vis_a[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(flag)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;vis_a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1030-完美数列"><a href="#1030-完美数列" class="headerlink" title="1030 完美数列"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805291311284224" target="_blank" rel="noopener">1030 完美数列</a></h2><blockquote><p>这道题的所谓完美数列就是数列中的最大值小于或等于最小值乘一个常数。<br>输入数组之后排序，统计数组中每一个数作为最大数的时候出现完美数列的数列个数。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, p;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a[<span class="number">100005</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line"></span><br><span class="line">        sort(a, a + n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; n &amp;&amp; j &lt; n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(j &lt; n &amp;&amp; a[j] &lt;= (<span class="keyword">long</span> <span class="keyword">long</span>)a[i]*p)   <span class="comment">//a[i]*p会溢出</span></span><br><span class="line">                j++;</span><br><span class="line">            ans = max(ans, j - i);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1031-查验身份证"><a href="#1031-查验身份证" class="headerlink" title="1031 查验身份证"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805290334011392" target="_blank" rel="noopener">1031 查验身份证</a></h2><p>一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下：</p><p>首先对前17位数字加权求和，权重分配为<code>{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}</code><br>然后将计算的和对11取模得到值Z；最后按照以下关系对应Z值与校验码M的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Z：0 1 2 3 4 5 6 7 8 9 10</span><br><span class="line">M：1 0 X 9 8 7 6 5 4 3 2</span><br></pre></td></tr></table></figure><p>现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。</p><blockquote><p>此题简单，输出’X’不是在最后一个以及Z值和校验码M不匹配的例子就好了。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i= <span class="number">-1</span>, len = s.length();</span><br><span class="line">    <span class="keyword">while</span>(i++ &lt; len - <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] &lt; <span class="string">'0'</span> || s[i] &gt; <span class="string">'9'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum_id</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> quan[<span class="number">18</span>] = &#123;<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, len = s.length();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        sum += (s[i] - <span class="string">'0'</span>) * quan[i];</span><br><span class="line">    <span class="keyword">return</span> sum % <span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="built_in">string</span> id[<span class="number">105</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; id[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> z[<span class="number">12</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> m[<span class="number">12</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> nm, nz = sum_id(id[i]);</span><br><span class="line">            <span class="keyword">if</span>(id[i][<span class="number">34</span>] == <span class="string">'X'</span>)</span><br><span class="line">                nm = <span class="number">24</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nm = id[i][<span class="number">35</span>] - <span class="string">'0'</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nz == z[j] &amp;&amp; nm != m[j] || !check(id[i]))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; id[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                    x++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"All passed"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1032-挖掘机技术哪家强"><a href="#1032-挖掘机技术哪家强" class="headerlink" title="1032 挖掘机技术哪家强"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805289432236032" target="_blank" rel="noopener">1032 挖掘机技术哪家强</a></h2><blockquote><p>输入的时候求和然后迭代找出和的最大值即可</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> school[<span class="number">100005</span>], id, score, max_id = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(school, <span class="number">0</span>, <span class="keyword">sizeof</span> school);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; id &gt;&gt; score;</span><br><span class="line">            school[id] += score;</span><br><span class="line">            max_id = max_id &gt; id ? max_id : id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max_sum = <span class="number">0</span>, max_sum_id = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= max_id; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(max_sum &lt; school[i])</span><br><span class="line">            &#123;</span><br><span class="line">                max_sum = school[i];</span><br><span class="line">                max_sum_id = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; max_sum_id &lt;&lt; <span class="string">" "</span> &lt;&lt; max_sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1033-旧键盘打字"><a href="#1033-旧键盘打字" class="headerlink" title="1033 旧键盘打字"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805288530460672" target="_blank" rel="noopener">1033 旧键盘打字</a></h2><p>旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及坏掉的那些键，打出的结果文字会是怎样？</p><blockquote><p>我的写法是直接数组和tag统计坏的按键，然后迭代输出第二个字符串没有坏的字符即可，非常low的写法，不过就是AC了，哈哈哈。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a, b;</span><br><span class="line">    getline(<span class="built_in">cin</span>, a);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> number[<span class="number">10</span>], english[<span class="number">27</span>];</span><br><span class="line">    <span class="built_in">memset</span>(number, <span class="number">1</span>, <span class="keyword">sizeof</span> number);</span><br><span class="line">    <span class="built_in">memset</span>(english, <span class="number">1</span>, <span class="keyword">sizeof</span> english);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> tag1, tag2, tag3, tag4, tag5;</span><br><span class="line">    tag1 = tag2 = tag3 = tag4 = tag5 = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &gt;= <span class="string">'A'</span> &amp;&amp; a[i] &lt;= <span class="string">'Z'</span>)</span><br><span class="line">            english[a[i] - <span class="string">'A'</span> + <span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i] &gt;= <span class="string">'0'</span> &amp;&amp; a[i] &lt;= <span class="string">'9'</span>)</span><br><span class="line">            number[a[i] - <span class="string">'0'</span>] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i] == <span class="string">'_'</span>)</span><br><span class="line">            tag1 = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i] == <span class="string">','</span>)</span><br><span class="line">            tag2 = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i] == <span class="string">'.'</span>)</span><br><span class="line">            tag3 = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i] == <span class="string">'-'</span>)</span><br><span class="line">            tag4 = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i] == <span class="string">'+'</span>)</span><br><span class="line">            tag5 = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b[i] &gt;= <span class="string">'a'</span> &amp;&amp; b[i] &lt;= <span class="string">'z'</span> &amp;&amp; english[b[i] - <span class="string">'a'</span> + <span class="number">1</span>])</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; b[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(b[i] &gt;= <span class="string">'A'</span> &amp;&amp; b[i] &lt;= <span class="string">'Z'</span> &amp;&amp; english[b[i] - <span class="string">'A'</span> + <span class="number">1</span>] &amp;&amp; tag5)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; b[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(b[i] &gt;= <span class="string">'0'</span> &amp;&amp; b[i] &lt;= <span class="string">'9'</span> &amp;&amp; number[b[i] - <span class="string">'0'</span>])</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; b[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(b[i] == <span class="string">'_'</span> &amp;&amp; tag1)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; b[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(b[i] == <span class="string">','</span> &amp;&amp; tag2)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; b[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(b[i] == <span class="string">'.'</span> &amp;&amp; tag3)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; b[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(b[i] == <span class="string">'-'</span> &amp;&amp; tag4)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; b[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(b[i] == <span class="string">'+'</span> &amp;&amp; tag5)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1035-插入与归并"><a href="#1035-插入与归并" class="headerlink" title="1035 插入与归并"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805286714327040" target="_blank" rel="noopener">1035 插入与归并</a></h2><blockquote><p>这题本来应该是考察这两个算法，但是我的归并排序好像有点不一样，所以归并排序是用sort模拟的。至于插入排序就原模原样照着写的了。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">300005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>], b[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt; a[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> x = a[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; x &lt; a[j]) &#123;</span><br><span class="line">                a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            a[j + <span class="number">1</span>] = x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Insertion Sort"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i == n - <span class="number">1</span>)</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (equal(a, a + n, b)) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> key = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; ; i *= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j += i) &#123;</span><br><span class="line">sort(a + j, a + (j + i &lt; n ? j + i : n));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (key) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Merge Sort"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(j == n - <span class="number">1</span>)</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; a[j] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; a[j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (equal(a, a + n, b))</span><br><span class="line">key = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i &gt; n)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> c[<span class="number">105</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            c[i] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        insert_sort(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            a[i] = c[i];</span><br><span class="line">        &#125;</span><br><span class="line">        merge_sort(<span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1036-跟奥巴马一起编程"><a href="#1036-跟奥巴马一起编程" class="headerlink" title="1036 跟奥巴马一起编程"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805285812551680" target="_blank" rel="noopener">1036 跟奥巴马一起编程</a></h2><blockquote><p>很简单的一个题目，列是行数的一半且取四舍五入，两个for循环就好了，第一行和最后一行输出n个a字符，其他行输出a空格a</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; c) &#123;</span><br><span class="line">        <span class="keyword">double</span> m = (<span class="keyword">double</span>)n / <span class="number">2</span> + <span class="number">0.5</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= (<span class="keyword">int</span>)m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span> || i == (<span class="keyword">int</span>)m) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i == <span class="number">1</span> || i == n)</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1037-在霍格沃茨找零钱"><a href="#1037-在霍格沃茨找零钱" class="headerlink" title="1037 在霍格沃茨找零钱"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805284923359232" target="_blank" rel="noopener">1037 在霍格沃茨找零钱</a></h2><blockquote><p>没啥好说的，我不明白为什么这道题有20分…</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> g1, s1, k1;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d.%d.%d"</span>, &amp;g1, &amp;s1, &amp;k1);</span><br><span class="line">    <span class="keyword">int</span> sum1 = g1*<span class="number">17</span>*<span class="number">29</span> + s1*<span class="number">29</span> + k1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> g2, s2, k2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d.%d.%d"</span>, &amp;g2, &amp;s2, &amp;k2);</span><br><span class="line">    <span class="keyword">int</span> sum2 = g2*<span class="number">17</span>*<span class="number">29</span> + s2*<span class="number">29</span> + k2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cha = sum2 - sum1;</span><br><span class="line">    <span class="keyword">if</span>(cha &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d.%d.%d"</span>, cha / <span class="number">17</span> / <span class="number">29</span>, cha / <span class="number">29</span> % <span class="number">17</span>, cha % <span class="number">29</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cha = -cha;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-%d.%d.%d"</span>, cha / <span class="number">17</span> / <span class="number">29</span>, cha / <span class="number">29</span> % <span class="number">17</span>, cha % <span class="number">29</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1038-统计同成绩学生"><a href="#1038-统计同成绩学生" class="headerlink" title="1038 统计同成绩学生"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805284092887040" target="_blank" rel="noopener">1038 统计同成绩学生</a></h2><blockquote><p>每次输入一个成绩就把这个成绩的次数加一，然后输出就完事了</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a[<span class="number">100005</span>], b[<span class="number">100005</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">            b[a[i]] ++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> k, x, sum;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">            <span class="keyword">if</span>(i == k)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; b[x] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; b[x] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1039-到底买不买"><a href="#1039-到底买不买" class="headerlink" title="1039 到底买不买"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805283241443328" target="_blank" rel="noopener">1039 到底买不买</a></h2><blockquote><p>日常暴力求解，判断b字符串出现的字符在a字符串有没有出现，出现了b字符串的大小n减1，同时标记a字符访问了。最后如果N是零的话就输出剩余的，不为0就输出n呗</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = b.size();</span><br><span class="line">        <span class="keyword">int</span> m = a.size();</span><br><span class="line">        <span class="keyword">bool</span> vis[<span class="number">1005</span>];</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.size(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(b[i] == a[j] &amp;&amp; vis[j] == <span class="literal">false</span>) &#123;</span><br><span class="line">                    n--;</span><br><span class="line">                    vis[j] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes "</span> &lt;&lt; m - b.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"No "</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1040-有几个PAT"><a href="#1040-有几个PAT" class="headerlink" title="1040 有几个PAT"></a><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805282389999616" target="_blank" rel="noopener">1040 有几个PAT</a></h2><blockquote><p>这道题让我想起了最起初校赛的时候，没做出来，今天还是没有做出来，我直接三个循环肯定是超时的，再我去看了其他人的题解之后感觉恍然大悟，但是又感觉这东西太难想到了，具体的操作见代码的注释</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; a) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = a.size();</span><br><span class="line">        <span class="keyword">int</span> numT = <span class="number">0</span>, numAT = <span class="number">0</span>, numPAT = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i --) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == <span class="string">'T'</span>)</span><br><span class="line">                numT ++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (a[i] == <span class="string">'A'</span>)</span><br><span class="line">                numAT += numT;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                numPAT += numAT;</span><br><span class="line">            <span class="keyword">if</span> (numPAT &gt; <span class="number">1000000007</span>)</span><br><span class="line">                numPAT %= <span class="number">1000000007</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; numPAT &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    栗子:</span></span><br><span class="line"><span class="comment">    PATTATAATT</span></span><br><span class="line"><span class="comment">    0123456789</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    i = 9: numT ++;         numT = 1</span></span><br><span class="line"><span class="comment">    i = 8: numT ++;         numT = 2</span></span><br><span class="line"><span class="comment">    i = 7: numAT += numT;   numAT = 2</span></span><br><span class="line"><span class="comment">    i = 6: numAT += numT;   numAT = 4</span></span><br><span class="line"><span class="comment">    1.'AT'序列数目增加到了4种</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    i = 5: numT ++;         numT = 3</span></span><br><span class="line"><span class="comment">    i = 4: numAT += numT;   numAT = 7</span></span><br><span class="line"><span class="comment">    2.'AT'序列数目增加到了7种</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    i = 3: numT++;          numT = 4</span></span><br><span class="line"><span class="comment">    i = 2: numT++;          numT = 5</span></span><br><span class="line"><span class="comment">    3.'AT'序列数目增加到了12种</span></span><br><span class="line"><span class="comment">    i = 1: numAT += numT;   numAT = 12</span></span><br><span class="line"><span class="comment">    i = 0: numPAT += numAT; numPAT = 12</span></span><br><span class="line"><span class="comment">    这是特例,只有一个'P'在最前面,只有一个'P'来整合'AT’序列,总计12种'PAT'</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019年3月30日，四十题打卡，此篇文章可能因为字数太多编辑器变得很卡很卡，所以我打算重新写一篇文章记后面的题目。再说一下最近的感受，题目难度确确实实不大，不过我的速度也太慢了，转眼快半个月了，我还做了不到一半，可见自己的底子有多差。这几天也改了一下自己写代码的习惯，所谓代码规范…感觉一个人一个规范，这还真不好说。&lt;/p&gt;
&lt;p&gt;2019年3月23日，周六，雨天。完成了第三个十题，越到后面越来越复杂，现在还没有到一半，我感觉照这个速度我可能要做一个月，我大概了解了一下其他人的速度，最多最多也就半个月吧…明天就是蓝桥杯了，我这个都没有刷完，有点惭愧。题目的难度不算太难，不比之前做的算法题，这些题目都有固定的思路，只是代码比较繁琐，还有很多坑点。&lt;/p&gt;
&lt;p&gt;2019年3月21日，真好，今天是春分。又做了十道题，最近生活及其不规律，十八号晚上和同学通宵去打游戏了，所以十九号睡了一天（还好那天没课）。二十号刷了八道题目吧，从晚上八点肝到了十一点半，之后又去水群水到了晚上十二点多，我估计我睡着应该快一点了，早上六点五十三的闹钟，实在起不来…还是说昨天做的题目吧，感觉比前面十道题目坑了好多，但是还算是简单的，除了那个大数的除法，我打算找个时间好好学学大数的运算，还有就是这十道题目排序算法偏多。&lt;/p&gt;
&lt;p&gt;2019年3月18日，我觉得还是得刷一点题，这些题目难度不是很大，没有涉及什么算法，都是一些很基础的东西，自己基础本来就不好，所以打算把PAT的乙级题库刷一遍。水平有限，这里的AC代码没有多少参考性，很多题目都是硬着头皮写过去的，到目前为止，对比其他大佬的AC代码唯一的感觉就是自闭…&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://blog.iplua.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C++" scheme="https://blog.iplua.com/tags/C/"/>
    
      <category term="PAT" scheme="https://blog.iplua.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>Fiddler获取iOS应用旧版本安装包</title>
    <link href="https://blog.iplua.com/fiddle-ios-ipa/"/>
    <id>https://blog.iplua.com/fiddle-ios-ipa/</id>
    <published>2019-02-25T12:26:00.000Z</published>
    <updated>2019-04-18T08:39:27.306Z</updated>
    
    <content type="html"><![CDATA[<p>之前想着用<code>thor</code>抓旧版本的<code>ipa</code>，然而发现手机是无法实现的。再加上在用的追书神器企业版的证书失效了，就想着还是安装个老版本吧，所以最后还是用<code>fiddler</code>抓<code>iTtunes</code>的数据。</p><p>在这过程中，感受就是电脑操作真的方便…<code>Thor</code>设置断点什么的实在太麻烦了，而且写过滤器还要找相关的域名和关键字等等。特别是过滤器的断点，<code>Thor</code>的断点其实是断点加操作（比如替换插入等等）两步结合到了一起，它类似一个脚本，运行的过程是，碰到设定需要断点的信息体之后断点然后自动执行替换等操作，是全自动的。这当然是好，但是也就有了一定的门槛，不是谁拿到手就可以写一个设置好了断点的过滤器出来。然而<code>Fiddler</code>非常好操作，不需要什么专业知识，只是需要解密抓到的包，然后手动替换就行了，使用简单就是<code>Fiddler</code>的特点。</p><p>这两个不同平台的抓包工具都非常强大，<code>Thor</code>就稍微难使用一些，但是可以使用别人的过滤器只需要打开软件即可（价格也贵，软件就是68）。<code>Fiddler</code>是免费的抓包工具，反正在<code>windows</code><br>是完全免费的…然后使用很简单，功能也很多，都差不多，只要能抓包就行了…</p><blockquote><p>文章最后是演示视频….</p></blockquote><a id="more"></a><h2 id="准备软件"><a href="#准备软件" class="headerlink" title="准备软件"></a>准备软件</h2><p><code>Fiddler</code> <code>iTunes</code><br>Fiddler直接去官网下载即可，而iTunes需要下载版本号在12.6.5.3以下（包括它），下图是爱思助手里面的。</p><p><img src="https://i.loli.net/2019/02/25/5c73df49d063e.png" alt="1"></p><hr><h2 id="Fiddler相关设置"><a href="#Fiddler相关设置" class="headerlink" title="Fiddler相关设置"></a>Fiddler相关设置</h2><p>这里主要是设置<code>Fiddler</code>对<code>Https</code>的支持，有一个坑点是设置好之后可能会出现系统所有<code>SSL证书</code>失效的情况，这个时候的解决办法是先删除所有Fiddler生成的SSL证书，然后重新安装这些证书。</p><p>具体路径：<code>Fiddler --&gt; Tools --&gt; Options --&gt; Https</code></p><p><img src="https://i.loli.net/2019/02/25/5c73dead4c77f.png" alt="2"></p><p>开启上图设置，第一次打开的时候会提示安装证书的，如果不提示就手动安装<br>点击<code>Actions --&gt; Trust Root Certificate</code>即可。</p><hr><h2 id="获取版本号信息"><a href="#获取版本号信息" class="headerlink" title="获取版本号信息"></a>获取版本号信息</h2><blockquote><p>仅仅是为了抓到版本信息，如果有了自己想下载软件的版本号直接进行下一步就好了。</p></blockquote><p>1.首先打开<code>iTnues</code>并登录<code>Apple账户</code><br>2.然后在iTnues的App Store里面搜索应用名（以QQ为例）</p><p><img src="https://i.loli.net/2019/02/25/5c73e082936d3.png" alt="3"></p><hr><p>3.再打开Fiddler，并且设置断点：<code>bpu MZBuy.woa</code></p><p><img src="https://i.loli.net/2019/02/25/5c73e0e2d9e09.png" alt="4"></p><hr><p>4.然后返回iTunes点击下载QQ，这里因为已经设置了断点，所以点击下载是不会有反应的。然后返回Fiddler找到抓到的包，并且点击<code>Run To Completion</code></p><p><img src="https://i.loli.net/2019/02/25/5c73e19dcbd2a.png" alt="5"></p><blockquote><p>那个红色的就是在iTunes里点击下载之后抓到的包，因为设置了断点所以它卡在那里了，点击运行完成之后才会正常响应。其实不设置断点也可以…只要能从那么多数据包中找到那一个…</p></blockquote><hr><p>5.对抓到的包进行解密操作</p><p><img src="https://i.loli.net/2019/02/25/5c73e35c66d3d.png" alt="6"></p><blockquote><p>因为https传输是加密的，如果不解密，我们抓到的数据包是没用的，因此需要解密，按图上的操作就行了。</p></blockquote><hr><p>6.找到自己想要安装的版本号</p><p><img src="https://i.loli.net/2019/02/25/5c73e362bb78b.png" alt="7"></p><blockquote><p>解密之后要找到版本号，已经解密的数据包可以保存下来（xml文件），当然也可以直接在Fiddler的界面查看，就比如图上。至于这些数字对应哪个版本…嗯嗯…这个我也不知道…因此，只能一个个尝试了，还好iTunes在下载完之后会有版本号。</p></blockquote><hr><h2 id="下载旧版本"><a href="#下载旧版本" class="headerlink" title="下载旧版本"></a>下载旧版本</h2><p>7.重新打开iTunes并且下载旧版本（以追书神器为例）<br>和前面的操作一样，先搜索APP，然后打开Fiddler设置断点…<br>值得一提的是，这里设置断点和前面是不一样的，前面说那么多其实只是为了抓到数据包从而获取到版本号，如果提前知道了版本号可以直接进行这一步，也就是设置断点然后修改响应信息。</p><p><img src="https://i.loli.net/2019/02/25/5c73e6535f1d7.png" alt="8"></p><p><img src="https://i.loli.net/2019/02/25/5c73e6652324b.png" alt="9"></p><p>8.安装ipa….可以用某某助手，用自己AppleID抓的ipa包，安装时没有问题的。</p><hr><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>折腾了两天，本来是想学习一下Thor的过滤器制作，但是无奈断点那块有点儿难，我又这么懒，所以就没弄Thor了，不过我拆了很多包看了一下他们的写法，总的来说那些传出来的过滤器实际上都只是设置断点然后修改响应信息体回传….也就是自慰作用而已…名字写的吓人，实际上可用的也不多，而Thor也不是万能的。</p><p>Fiddler是一个很好的软件，只是我现在不知道怎么连接手机使用，可以的话Fiddler肯定是比Thor好用的，因为电脑操作方便。而Thor还是胜在过滤器那方面，写好断点之后可以直接抓包打开网站APP什么的，程序会自动断点并且修改信息，只是设置断点还是有点难…</p><blockquote><p>清理腾讯云COS的时候不小心把视频删了，有时间再录制…</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前想着用&lt;code&gt;thor&lt;/code&gt;抓旧版本的&lt;code&gt;ipa&lt;/code&gt;，然而发现手机是无法实现的。再加上在用的追书神器企业版的证书失效了，就想着还是安装个老版本吧，所以最后还是用&lt;code&gt;fiddler&lt;/code&gt;抓&lt;code&gt;iTtunes&lt;/code&gt;的数据。&lt;/p&gt;
&lt;p&gt;在这过程中，感受就是电脑操作真的方便…&lt;code&gt;Thor&lt;/code&gt;设置断点什么的实在太麻烦了，而且写过滤器还要找相关的域名和关键字等等。特别是过滤器的断点，&lt;code&gt;Thor&lt;/code&gt;的断点其实是断点加操作（比如替换插入等等）两步结合到了一起，它类似一个脚本，运行的过程是，碰到设定需要断点的信息体之后断点然后自动执行替换等操作，是全自动的。这当然是好，但是也就有了一定的门槛，不是谁拿到手就可以写一个设置好了断点的过滤器出来。然而&lt;code&gt;Fiddler&lt;/code&gt;非常好操作，不需要什么专业知识，只是需要解密抓到的包，然后手动替换就行了，使用简单就是&lt;code&gt;Fiddler&lt;/code&gt;的特点。&lt;/p&gt;
&lt;p&gt;这两个不同平台的抓包工具都非常强大，&lt;code&gt;Thor&lt;/code&gt;就稍微难使用一些，但是可以使用别人的过滤器只需要打开软件即可（价格也贵，软件就是68）。&lt;code&gt;Fiddler&lt;/code&gt;是免费的抓包工具，反正在&lt;code&gt;windows&lt;/code&gt;&lt;br&gt;是完全免费的…然后使用很简单，功能也很多，都差不多，只要能抓包就行了…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文章最后是演示视频….&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="实用教程" scheme="https://blog.iplua.com/categories/%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="iOS" scheme="https://blog.iplua.com/tags/iOS/"/>
    
      <category term="ipa" scheme="https://blog.iplua.com/tags/ipa/"/>
    
      <category term="Fiddler" scheme="https://blog.iplua.com/tags/Fiddler/"/>
    
      <category term="抓包" scheme="https://blog.iplua.com/tags/%E6%8A%93%E5%8C%85/"/>
    
      <category term="iOS软件降级安装" scheme="https://blog.iplua.com/tags/iOS%E8%BD%AF%E4%BB%B6%E9%99%8D%E7%BA%A7%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>iOS神器Thor的初次使用</title>
    <link href="https://blog.iplua.com/thor1/"/>
    <id>https://blog.iplua.com/thor1/</id>
    <published>2019-02-23T04:43:00.000Z</published>
    <updated>2019-05-26T05:56:48.254Z</updated>
    
    <content type="html"><![CDATA[<p>前两天找ios旧版app的接触到这个软件：<a href="https://github.com/PixelCyber/Thor/blob/master/README-zh-Hans.md" target="_blank" rel="noopener">Thor</a>，恰巧有一个博主有介绍Thor和分享了一些过滤器，看了之后这让我对Thor产生了很大的兴趣，于是就下载了这个软件（其实也是闲的）。</p><p>简单使用了两天，也只是普通的抓包，像我这种从未接触过相关内容的人基本上看不懂那些抓到的数据包。还记得之前Windows的Fiddler抓包工具，当时是用人用来改数据然后撸实物，改各种网页的数据什么的…Thor也可以做到，主要的操作是设置断点，在响应信息体回传的时候修改返回的数据等等。如果只是普通的抓包那肯定是不够的，Thor强大之处就是可以使用过滤器。</p><a id="more"></a><p>下面以修改bilibili的myinfo信息体回传修改为例吧。<br>设置断点那些需要极高的专业知识…然而我连网络是怎么连接的都不知道，所以我是拆了一个其他人的过滤器研究了一下，大概知道了原理所在，但是要真正的去写一个带断点的过滤器还是不会…</p><p>一.过滤器的普通设置：<br>1.抓包协议：<code>HTTP</code>以及<code>HTTPS</code><br>2.匹配http的方法：<code>GET</code>和<code>POST</code><br>3.包含的域名：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">api.bilibili.com</span><br><span class="line">app.bilibili.com</span><br><span class="line">pay.bilibili.com</span><br><span class="line">bangumi.bilibili.com</span><br></pre></td></tr></table></figure><p>4.包含的关键字：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/pgc/view/app/season</span><br><span class="line">/x/v2/dm/post</span><br><span class="line">/pgc/player/api/playurl</span><br><span class="line">/player/api/v2/playurl</span><br><span class="line">/paywallet/wallet/getUserWallet</span><br><span class="line">/x/v2/account/myinfo</span><br><span class="line">/x/v2/account/mine</span><br><span class="line">/x/space/app/index</span><br></pre></td></tr></table></figure><blockquote><p>其中包含的域名和关键字的作用就是使用该过滤器之后Thor只抓这些匹配的数据包</p></blockquote><p>二.设置断点<br>这一块我找了很久的教程，就没有看到过…<br>首先要新建一个断点，命名无所谓，最主要的是写请求阶段：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TCP连接前</span><br><span class="line">请求头发送前</span><br><span class="line">请求信息体发送前</span><br><span class="line">响应头回传前</span><br><span class="line">响应信息体回传前</span><br></pre></td></tr></table></figure><p>嗯，这么五大部分…我都不知道怎么去写，但是我拆包了解了响应信息体回传前是什么原理。<br>新建一个响应体回传前的规则：<br>判断条件为空，也就是无论怎么样我都会去执行条件满足的操作<br>备注无所谓</p><p>然后是条件满足的时候应该怎么去做，下面以替换等级信息体为例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^@rsp.bodyText "level":\d+" "level":8"</span><br></pre></td></tr></table></figure><p>其中^是操作符：替换或插入<br>操作对象：@rsp.bodyText<br>正则表达式：level”:\d+<br>替换值：level”:8</p><p>这里的作用就是抓到level信息体之后替换掉其中的值，但是有一点是，咱们的信息是在服务器上面的，软件显示多少我们能够更改，但是其实际是没用的…所以只是娱乐娱乐。<br>还有一些规则：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">^@rsp.bodyText "type":\d+" "type":2"</span><br><span class="line">^@rsp.bodyText "level":\d+" "level":8"</span><br><span class="line">^@rsp.bodyText "due_date":\d+" "due_date":4070923932"</span><br><span class="line">^@rsp.bodyText "vipType":\d+,"vipStatus":\d+" "vipType":2,"vipStatus":1"</span><br><span class="line">^@rsp.bodyText "vip_type":\d+,"vip_status":\d+" "vip_type":2,"vip_status":1"</span><br></pre></td></tr></table></figure><p>都是照搬的别人的，我不会什么正则表达式…额，也就大概了解一下其中的原理，搞来搞去我也没啥兴趣了…要先从海量的数据包中找到自己要修改的东西实在太累了，往往抓一次两次是不够的，需要很多很多次的调试才能得到想要的结果，这点还是很佩服写出哔哩哔哩这个过滤器的作者。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两天找ios旧版app的接触到这个软件：&lt;a href=&quot;https://github.com/PixelCyber/Thor/blob/master/README-zh-Hans.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Thor&lt;/a&gt;，恰巧有一个博主有介绍Thor和分享了一些过滤器，看了之后这让我对Thor产生了很大的兴趣，于是就下载了这个软件（其实也是闲的）。&lt;/p&gt;
&lt;p&gt;简单使用了两天，也只是普通的抓包，像我这种从未接触过相关内容的人基本上看不懂那些抓到的数据包。还记得之前Windows的Fiddler抓包工具，当时是用人用来改数据然后撸实物，改各种网页的数据什么的…Thor也可以做到，主要的操作是设置断点，在响应信息体回传的时候修改返回的数据等等。如果只是普通的抓包那肯定是不够的，Thor强大之处就是可以使用过滤器。&lt;/p&gt;
    
    </summary>
    
      <category term="实用教程" scheme="https://blog.iplua.com/categories/%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="iOS" scheme="https://blog.iplua.com/tags/iOS/"/>
    
      <category term="抓包" scheme="https://blog.iplua.com/tags/%E6%8A%93%E5%8C%85/"/>
    
      <category term="Thor" scheme="https://blog.iplua.com/tags/Thor/"/>
    
  </entry>
  
  <entry>
    <title>玩游戏的那些时候</title>
    <link href="https://blog.iplua.com/hanjia/"/>
    <id>https://blog.iplua.com/hanjia/</id>
    <published>2019-02-18T08:21:00.000Z</published>
    <updated>2019-04-14T11:06:34.521Z</updated>
    
    <content type="html"><![CDATA[<p>寒假休息的挺好的，每天打打游戏睡睡觉，基本上不用干啥事。</p><p>啊？codeforces？啥玩意，回家的前几天刷了两道题就没进去过了。</p><p>啊？牛客寒假算法学习？哦，我忘记是哪几天了，没去。</p><p>啊？组内的训练赛？这个是前两天的事，不过晚上打游戏去了，等我看到消息已经在排名了。</p><p>上学期学了啥我还是记得一点的。并查集，二分，深搜，广搜，最小生成树，最短路径。</p><p>没记错的话就学了这么点东西，不过像思维题，数学题，贪心题等等这些都不敢说自己学到了啥，算法和数据结构可以说基础是懂的，因此多多刷题也就行了，不过在家里面，我也不知道为啥，即使很闲我也不想去刷题。</p><p>关于游戏方面我得修改一点东西，之前说的当不算数吧。<br>先说QQ飞车，这个游戏玩了一年多了，我弃游大概有两三个月，主要还是厌倦了，试想一个网络游戏被我硬生生玩成了单机游戏，那该有多么无聊。现在QQ飞车好多了，进了车队然后加了QQ群，还算比较活跃，但是每天玩的时间也不算多，顶多两小时。</p><p>再说刺激战场吧，这个游戏我之前也有玩过一两场。一直到过年的时候我才算真正开始玩这个游戏，几个弟弟们在一起玩刺激战场，凑热闹般和他们一起玩了一下午，然后是大学同学拉我玩，半将就着和他玩了几天，然后养成习惯了一般每天下午和晚上都会和他开黑，毕竟寒假在家闲着无聊，打打游戏还是不错的。但是我为什么要说这些呢？</p><p>今天下午的时候照常和同学开黑，但是玩了两把我就退了。我说下理由，就因为他和一个不认识的小姐姐走得很近，反倒不带着我了…首先我要说的是我玩这个游戏只是娱乐休闲，因此我的KDA只有1.06（我知道自己很菜）这么久来我都知道自己很菜，但是大部分时间我都很快乐。就比如像这种情况，我同学和一个不认识的妹子走一起，我呢？我就只好和另一个队友走了…每当出现这种情况我就很尴尬，如果说我继续跟着我同学就像是打扰他泡妹一样，如果我不跟着我又不知道往那边走，说回去我还是菜，所以最后我得到一个结论，我离不开队友，没有队友我就玩不下去。</p><p>其实很正常，我之前说自己只是娱乐休闲而已，一直不怎么在乎自己的技术，我一直以来都是说自己很菜很菜（我确实打游戏很菜）那么本来是和同学一起玩，他可以带我，但是他带别人去了我就很受不了了，感觉有点吃醋的意思，但是我特么是个钢铁直男，我之所以有这个想法还是因为自己很菜离不开他，在我的游戏观中应该是快快乐乐的玩耍，至于说同学想带妹完全就没必要带上我，我只会感觉自己是多余的。所以就这样了，每次他和哪个妹子玩我都会退出去，然后找借口和他说一声，一来而来也有个三四次了吧，也许是自己游戏观的问题，除了这点其他都挺好的，和小伙伴玩的好好的突然被别人抢走的感觉？？？？算了我也说不清楚了</p><p>今天晚上的寒假训练赛参加了，摆明了说我百度了，急着打游戏（打脸）最后只A了三道题。<br>二十一号就去学校了，我打算重新写一下以前的东西，也会重新去刷题的啦，学习还是要学习的…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;寒假休息的挺好的，每天打打游戏睡睡觉，基本上不用干啥事。&lt;/p&gt;
&lt;p&gt;啊？codeforces？啥玩意，回家的前几天刷了两道题就没进去过了。&lt;/p&gt;
&lt;p&gt;啊？牛客寒假算法学习？哦，我忘记是哪几天了，没去。&lt;/p&gt;
&lt;p&gt;啊？组内的训练赛？这个是前两天的事，不过晚上打游戏
      
    
    </summary>
    
      <category term="生活点滴" scheme="https://blog.iplua.com/categories/%E7%94%9F%E6%B4%BB%E7%82%B9%E6%BB%B4/"/>
    
    
      <category term="生活" scheme="https://blog.iplua.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>关于本博客的</title>
    <link href="https://blog.iplua.com/this-blog/"/>
    <id>https://blog.iplua.com/this-blog/</id>
    <published>2019-02-11T08:28:00.000Z</published>
    <updated>2019-04-18T08:39:35.697Z</updated>
    
    <content type="html"><![CDATA[<p>这个博客存在快四个月了，也许之前没有误删数据库的话不会像现在这个样子，之前虽然文章很水也有个三四十篇，照那样继续下去，坚持一年半载也不是问题，但是事与愿违，误删数据库之后我就不想再继续了。</p><p>以前都写的什么呢？做错了一个题目，搬上来…不会写的题目，看了别人的题解，搬上来。再加上一些毫无用处的笔记，感觉真没意思，不知道写了究竟有什么用。对于没有接触ACM的人来说压根就没法看，对于接触了ACM的人来说感觉毫无价值，心态有点崩，自己花在这个博客的时间其实也挺多的，到头来感觉都浪费了。</p><p>重建的第十天，没写什么东西。抄了一篇文章，之前写了一篇关于安卓状态栏布局修改的文章，自己强迫症看着那个排版很不舒服就直接删了，很任性的我，也没啥后悔的，就这样子了。</p><p>前几天一直都在看各个博客的模板，我记得我最开始用的是wp的那个二次元的主题akina，因为没接触过别的模板，感觉那个很漂亮。之后看到了typecho的handsome模板，瞬间被吸引了，然后handsome用了两三个月感到了审美疲劳，接着这几天看啥都不顺，没感觉有那个模板顺自己的心意，自己也不会修改什么的，我web方面只上过一个选修课，也就只会普通的css修改。</p><p>找不到喜欢的模板，我有些不想像以前那样继续写下去了，学习笔记？我为何不直接买个本子写下来呢？何况自己acm到底弄搞多久还是一个问题，像我这样的人，呵呵，怎么坚持的下去，说着笑了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个博客存在快四个月了，也许之前没有误删数据库的话不会像现在这个样子，之前虽然文章很水也有个三四十篇，照那样继续下去，坚持一年半载也不是问题，但是事与愿违，误删数据库之后我就不想再继续了。&lt;/p&gt;
&lt;p&gt;以前都写的什么呢？做错了一个题目，搬上来…不会写的题目，看了别人的题解
      
    
    </summary>
    
      <category term="生活点滴" scheme="https://blog.iplua.com/categories/%E7%94%9F%E6%B4%BB%E7%82%B9%E6%BB%B4/"/>
    
    
      <category term="生活" scheme="https://blog.iplua.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>你怎么样了</title>
    <link href="https://blog.iplua.com/how-are-you/"/>
    <id>https://blog.iplua.com/how-are-you/</id>
    <published>2019-02-03T09:56:00.000Z</published>
    <updated>2019-04-14T11:07:52.508Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/img/3.jpg" alt></p><a id="more"></a><p>这个时代不浪漫到什么程度了呢？深情的人，都被叫做舔狗；忧郁糟心的人，被称为矫情。</p><p>放弃挣扎和绝望了，也会自嘲的说一句，就让我丧着吧，你突然好像就对所有事情都失去兴趣了。<br>曾经想去做的事不想做了，曾经拼命想吸引别人的注意，现在却丧失了表达的欲望。<br>看见月亮就只是月亮，听见雨声就只是雨声。</p><p>对自己好的人，一眼就看穿他背后的目的。<br>不再轻易相信任何人任何话，手机从不离身。<br>独自吃外卖的次数比和朋友约着出去吃的次数多了太多。<br>不再轻易的吐露自己的心声，变得独立，变得不喜欢麻烦任何人。</p><p>你其实并不是不浪漫，但大多数时候已经懒得去浪漫了。<br>相比起自由自在，你觉得任何一种关系都会束缚自己。<br>当然最主要的，还是知音难寻，所以身边的人都变得无足轻重起来。</p><p>但，其实你依然很浪漫，像春风一样，自由而浪漫。<br>你知道，其实有些人，我们已经见过这辈子的最后一面了。<br>只是当时我们并没有发觉，你表现得不喜欢任何事物，是因为你很少得到过想要的。<br>人和人之间想要保持长久舒适的关系，靠的是共性和吸引。<br>而不是压迫，捆绑，奉承和一味的付出，以及道德捆绑式的自我感动。</p><p>你还是有忧郁的时候，只是你把那些话发在了树洞里，不会有任何人知道。<br>你看山中有月亮，便会枕着月亮睡觉；你听见了下雨，就听见了温柔。<br>这世上所有的浪漫，都是因为你愿意为他浪费，浪费时间，浪费精力，浪费爱。<br>但如果不能浪费在喜欢的人身上，那我宁愿把它浪费在自己身上。<br>做一阵春风，拥抱我，或者让我永远自由而浪漫。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://nullptr-1252418998.cos.ap-shanghai.myqcloud.com/img/3.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活点滴" scheme="https://blog.iplua.com/categories/%E7%94%9F%E6%B4%BB%E7%82%B9%E6%BB%B4/"/>
    
    
      <category term="生活" scheme="https://blog.iplua.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
